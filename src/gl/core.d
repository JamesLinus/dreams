module gl.core;

version (Windows)
{
	import windows.glloader: glGetProcAddress;
}
version (linux)
{
	import linux.glloader: glGetProcAddress;
}

void loadOpenGLFunctions()
{
	// GL_VERSION_1_0
	glCullFace = cast(PFNGLCULLFACEPROC) glGetProcAddress("glCullFace");
	glFrontFace = cast(PFNGLFRONTFACEPROC) glGetProcAddress("glFrontFace");
	glHint = cast(PFNGLHINTPROC) glGetProcAddress("glHint");
	glLineWidth = cast(PFNGLLINEWIDTHPROC) glGetProcAddress("glLineWidth");
	glPointSize = cast(PFNGLPOINTSIZEPROC) glGetProcAddress("glPointSize");
	glPolygonMode = cast(PFNGLPOLYGONMODEPROC) glGetProcAddress("glPolygonMode");
	glScissor = cast(PFNGLSCISSORPROC) glGetProcAddress("glScissor");
	glTexParameterf = cast(PFNGLTEXPARAMETERFPROC) glGetProcAddress("glTexParameterf");
	glTexParameterfv = cast(PFNGLTEXPARAMETERFVPROC) glGetProcAddress("glTexParameterfv");
	glTexParameteri = cast(PFNGLTEXPARAMETERIPROC) glGetProcAddress("glTexParameteri");
	glTexParameteriv = cast(PFNGLTEXPARAMETERIVPROC) glGetProcAddress("glTexParameteriv");
	glTexImage1D = cast(PFNGLTEXIMAGE1DPROC) glGetProcAddress("glTexImage1D");
	glTexImage2D = cast(PFNGLTEXIMAGE2DPROC) glGetProcAddress("glTexImage2D");
	glDrawBuffer = cast(PFNGLDRAWBUFFERPROC) glGetProcAddress("glDrawBuffer");
	glClear = cast(PFNGLCLEARPROC) glGetProcAddress("glClear");
	glClearColor = cast(PFNGLCLEARCOLORPROC) glGetProcAddress("glClearColor");
	glClearStencil = cast(PFNGLCLEARSTENCILPROC) glGetProcAddress("glClearStencil");
	glClearDepth = cast(PFNGLCLEARDEPTHPROC) glGetProcAddress("glClearDepth");
	glStencilMask = cast(PFNGLSTENCILMASKPROC) glGetProcAddress("glStencilMask");
	glColorMask = cast(PFNGLCOLORMASKPROC) glGetProcAddress("glColorMask");
	glDepthMask = cast(PFNGLDEPTHMASKPROC) glGetProcAddress("glDepthMask");
	glDisable = cast(PFNGLDISABLEPROC) glGetProcAddress("glDisable");
	glEnable = cast(PFNGLENABLEPROC) glGetProcAddress("glEnable");
	glFinish = cast(PFNGLFINISHPROC) glGetProcAddress("glFinish");
	glFlush = cast(PFNGLFLUSHPROC) glGetProcAddress("glFlush");
	glBlendFunc = cast(PFNGLBLENDFUNCPROC) glGetProcAddress("glBlendFunc");
	glLogicOp = cast(PFNGLLOGICOPPROC) glGetProcAddress("glLogicOp");
	glStencilFunc = cast(PFNGLSTENCILFUNCPROC) glGetProcAddress("glStencilFunc");
	glStencilOp = cast(PFNGLSTENCILOPPROC) glGetProcAddress("glStencilOp");
	glDepthFunc = cast(PFNGLDEPTHFUNCPROC) glGetProcAddress("glDepthFunc");
	glPixelStoref = cast(PFNGLPIXELSTOREFPROC) glGetProcAddress("glPixelStoref");
	glPixelStorei = cast(PFNGLPIXELSTOREIPROC) glGetProcAddress("glPixelStorei");
	glReadBuffer = cast(PFNGLREADBUFFERPROC) glGetProcAddress("glReadBuffer");
	glReadPixels = cast(PFNGLREADPIXELSPROC) glGetProcAddress("glReadPixels");
	glGetBooleanv = cast(PFNGLGETBOOLEANVPROC) glGetProcAddress("glGetBooleanv");
	glGetDoublev = cast(PFNGLGETDOUBLEVPROC) glGetProcAddress("glGetDoublev");
	glGetError = cast(PFNGLGETERRORPROC) glGetProcAddress("glGetError");
	glGetFloatv = cast(PFNGLGETFLOATVPROC) glGetProcAddress("glGetFloatv");
	glGetIntegerv = cast(PFNGLGETINTEGERVPROC) glGetProcAddress("glGetIntegerv");
	glGetString = cast(PFNGLGETSTRINGPROC) glGetProcAddress("glGetString");
	glGetTexImage = cast(PFNGLGETTEXIMAGEPROC) glGetProcAddress("glGetTexImage");
	glGetTexParameterfv = cast(PFNGLGETTEXPARAMETERFVPROC) glGetProcAddress("glGetTexParameterfv");
	glGetTexParameteriv = cast(PFNGLGETTEXPARAMETERIVPROC) glGetProcAddress("glGetTexParameteriv");
	glGetTexLevelParameterfv = cast(PFNGLGETTEXLEVELPARAMETERFVPROC) glGetProcAddress("glGetTexLevelParameterfv");
	glGetTexLevelParameteriv = cast(PFNGLGETTEXLEVELPARAMETERIVPROC) glGetProcAddress("glGetTexLevelParameteriv");
	glIsEnabled = cast(PFNGLISENABLEDPROC) glGetProcAddress("glIsEnabled");
	glDepthRange = cast(PFNGLDEPTHRANGEPROC) glGetProcAddress("glDepthRange");
	glViewport = cast(PFNGLVIEWPORTPROC) glGetProcAddress("glViewport");

	// GL_VERSION_1_1
	glDrawArrays = cast(PFNGLDRAWARRAYSPROC) glGetProcAddress("glDrawArrays");
	glDrawElements = cast(PFNGLDRAWELEMENTSPROC) glGetProcAddress("glDrawElements");
	glGetPointerv = cast(PFNGLGETPOINTERVPROC) glGetProcAddress("glGetPointerv");
	glPolygonOffset = cast(PFNGLPOLYGONOFFSETPROC) glGetProcAddress("glPolygonOffset");
	glCopyTexImage1D = cast(PFNGLCOPYTEXIMAGE1DPROC) glGetProcAddress("glCopyTexImage1D");
	glCopyTexImage2D = cast(PFNGLCOPYTEXIMAGE2DPROC) glGetProcAddress("glCopyTexImage2D");
	glCopyTexSubImage1D = cast(PFNGLCOPYTEXSUBIMAGE1DPROC) glGetProcAddress("glCopyTexSubImage1D");
	glCopyTexSubImage2D = cast(PFNGLCOPYTEXSUBIMAGE2DPROC) glGetProcAddress("glCopyTexSubImage2D");
	glTexSubImage1D = cast(PFNGLTEXSUBIMAGE1DPROC) glGetProcAddress("glTexSubImage1D");
	glTexSubImage2D = cast(PFNGLTEXSUBIMAGE2DPROC) glGetProcAddress("glTexSubImage2D");
	glBindTexture = cast(PFNGLBINDTEXTUREPROC) glGetProcAddress("glBindTexture");
	glDeleteTextures = cast(PFNGLDELETETEXTURESPROC) glGetProcAddress("glDeleteTextures");
	glGenTextures = cast(PFNGLGENTEXTURESPROC) glGetProcAddress("glGenTextures");
	glIsTexture = cast(PFNGLISTEXTUREPROC) glGetProcAddress("glIsTexture");

	// GL_VERSION_1_2
	glBlendColor = cast(PFNGLBLENDCOLORPROC) glGetProcAddress("glBlendColor");
	glBlendEquation = cast(PFNGLBLENDEQUATIONPROC) glGetProcAddress("glBlendEquation");
	glDrawRangeElements = cast(PFNGLDRAWRANGEELEMENTSPROC) glGetProcAddress("glDrawRangeElements");
	glTexImage3D = cast(PFNGLTEXIMAGE3DPROC) glGetProcAddress("glTexImage3D");
	glTexSubImage3D = cast(PFNGLTEXSUBIMAGE3DPROC) glGetProcAddress("glTexSubImage3D");
	glCopyTexSubImage3D = cast(PFNGLCOPYTEXSUBIMAGE3DPROC) glGetProcAddress("glCopyTexSubImage3D");

	// GL_VERSION_1_3
	glActiveTexture = cast(PFNGLACTIVETEXTUREPROC) glGetProcAddress("glActiveTexture");
	glSampleCoverage = cast(PFNGLSAMPLECOVERAGEPROC) glGetProcAddress("glSampleCoverage");
	glCompressedTexImage3D = cast(PFNGLCOMPRESSEDTEXIMAGE3DPROC) glGetProcAddress("glCompressedTexImage3D");
	glCompressedTexImage2D = cast(PFNGLCOMPRESSEDTEXIMAGE2DPROC) glGetProcAddress("glCompressedTexImage2D");
	glCompressedTexImage1D = cast(PFNGLCOMPRESSEDTEXIMAGE1DPROC) glGetProcAddress("glCompressedTexImage1D");
	glCompressedTexSubImage3D = cast(PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) glGetProcAddress("glCompressedTexSubImage3D");
	glCompressedTexSubImage2D = cast(PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) glGetProcAddress("glCompressedTexSubImage2D");
	glCompressedTexSubImage1D = cast(PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) glGetProcAddress("glCompressedTexSubImage1D");
	glGetCompressedTexImage = cast(PFNGLGETCOMPRESSEDTEXIMAGEPROC) glGetProcAddress("glGetCompressedTexImage");

	// GL_VERSION_1_4
	glBlendFuncSeparate = cast(PFNGLBLENDFUNCSEPARATEPROC) glGetProcAddress("glBlendFuncSeparate");
	glMultiDrawArrays = cast(PFNGLMULTIDRAWARRAYSPROC) glGetProcAddress("glMultiDrawArrays");
	glMultiDrawElements = cast(PFNGLMULTIDRAWELEMENTSPROC) glGetProcAddress("glMultiDrawElements");
	glPointParameterf = cast(PFNGLPOINTPARAMETERFPROC) glGetProcAddress("glPointParameterf");
	glPointParameterfv = cast(PFNGLPOINTPARAMETERFVPROC) glGetProcAddress("glPointParameterfv");
	glPointParameteri = cast(PFNGLPOINTPARAMETERIPROC) glGetProcAddress("glPointParameteri");
	glPointParameteriv = cast(PFNGLPOINTPARAMETERIVPROC) glGetProcAddress("glPointParameteriv");

	// GL_VERSION_1_5
	glGenQueries = cast(PFNGLGENQUERIESPROC) glGetProcAddress("glGenQueries");
	glDeleteQueries = cast(PFNGLDELETEQUERIESPROC) glGetProcAddress("glDeleteQueries");
	glIsQuery = cast(PFNGLISQUERYPROC) glGetProcAddress("glIsQuery");
	glBeginQuery = cast(PFNGLBEGINQUERYPROC) glGetProcAddress("glBeginQuery");
	glEndQuery = cast(PFNGLENDQUERYPROC) glGetProcAddress("glEndQuery");
	glGetQueryiv = cast(PFNGLGETQUERYIVPROC) glGetProcAddress("glGetQueryiv");
	glGetQueryObjectiv = cast(PFNGLGETQUERYOBJECTIVPROC) glGetProcAddress("glGetQueryObjectiv");
	glGetQueryObjectuiv = cast(PFNGLGETQUERYOBJECTUIVPROC) glGetProcAddress("glGetQueryObjectuiv");
	glBindBuffer = cast(PFNGLBINDBUFFERPROC) glGetProcAddress("glBindBuffer");
	glDeleteBuffers = cast(PFNGLDELETEBUFFERSPROC) glGetProcAddress("glDeleteBuffers");
	glGenBuffers = cast(PFNGLGENBUFFERSPROC) glGetProcAddress("glGenBuffers");
	glIsBuffer = cast(PFNGLISBUFFERPROC) glGetProcAddress("glIsBuffer");
	glBufferData = cast(PFNGLBUFFERDATAPROC) glGetProcAddress("glBufferData");
	glBufferSubData = cast(PFNGLBUFFERSUBDATAPROC) glGetProcAddress("glBufferSubData");
	glGetBufferSubData = cast(PFNGLGETBUFFERSUBDATAPROC) glGetProcAddress("glGetBufferSubData");
	glMapBuffer = cast(PFNGLMAPBUFFERPROC) glGetProcAddress("glMapBuffer");
	glUnmapBuffer = cast(PFNGLUNMAPBUFFERPROC) glGetProcAddress("glUnmapBuffer");
	glGetBufferParameteriv = cast(PFNGLGETBUFFERPARAMETERIVPROC) glGetProcAddress("glGetBufferParameteriv");
	glGetBufferPointerv = cast(PFNGLGETBUFFERPOINTERVPROC) glGetProcAddress("glGetBufferPointerv");

	// GL_VERSION_2_0
	glBlendEquationSeparate = cast(PFNGLBLENDEQUATIONSEPARATEPROC) glGetProcAddress("glBlendEquationSeparate");
	glDrawBuffers = cast(PFNGLDRAWBUFFERSPROC) glGetProcAddress("glDrawBuffers");
	glStencilOpSeparate = cast(PFNGLSTENCILOPSEPARATEPROC) glGetProcAddress("glStencilOpSeparate");
	glStencilFuncSeparate = cast(PFNGLSTENCILFUNCSEPARATEPROC) glGetProcAddress("glStencilFuncSeparate");
	glStencilMaskSeparate = cast(PFNGLSTENCILMASKSEPARATEPROC) glGetProcAddress("glStencilMaskSeparate");
	glAttachShader = cast(PFNGLATTACHSHADERPROC) glGetProcAddress("glAttachShader");
	glBindAttribLocation = cast(PFNGLBINDATTRIBLOCATIONPROC) glGetProcAddress("glBindAttribLocation");
	glCompileShader = cast(PFNGLCOMPILESHADERPROC) glGetProcAddress("glCompileShader");
	glCreateProgram = cast(PFNGLCREATEPROGRAMPROC) glGetProcAddress("glCreateProgram");
	glCreateShader = cast(PFNGLCREATESHADERPROC) glGetProcAddress("glCreateShader");
	glDeleteProgram = cast(PFNGLDELETEPROGRAMPROC) glGetProcAddress("glDeleteProgram");
	glDeleteShader = cast(PFNGLDELETESHADERPROC) glGetProcAddress("glDeleteShader");
	glDetachShader = cast(PFNGLDETACHSHADERPROC) glGetProcAddress("glDetachShader");
	glDisableVertexAttribArray = cast(PFNGLDISABLEVERTEXATTRIBARRAYPROC) glGetProcAddress("glDisableVertexAttribArray");
	glEnableVertexAttribArray = cast(PFNGLENABLEVERTEXATTRIBARRAYPROC) glGetProcAddress("glEnableVertexAttribArray");
	glGetActiveAttrib = cast(PFNGLGETACTIVEATTRIBPROC) glGetProcAddress("glGetActiveAttrib");
	glGetActiveUniform = cast(PFNGLGETACTIVEUNIFORMPROC) glGetProcAddress("glGetActiveUniform");
	glGetAttachedShaders = cast(PFNGLGETATTACHEDSHADERSPROC) glGetProcAddress("glGetAttachedShaders");
	glGetAttribLocation = cast(PFNGLGETATTRIBLOCATIONPROC) glGetProcAddress("glGetAttribLocation");
	glGetProgramiv = cast(PFNGLGETPROGRAMIVPROC) glGetProcAddress("glGetProgramiv");
	glGetProgramInfoLog = cast(PFNGLGETPROGRAMINFOLOGPROC) glGetProcAddress("glGetProgramInfoLog");
	glGetShaderiv = cast(PFNGLGETSHADERIVPROC) glGetProcAddress("glGetShaderiv");
	glGetShaderInfoLog = cast(PFNGLGETSHADERINFOLOGPROC) glGetProcAddress("glGetShaderInfoLog");
	glGetShaderSource = cast(PFNGLGETSHADERSOURCEPROC) glGetProcAddress("glGetShaderSource");
	glGetUniformLocation = cast(PFNGLGETUNIFORMLOCATIONPROC) glGetProcAddress("glGetUniformLocation");
	glGetUniformfv = cast(PFNGLGETUNIFORMFVPROC) glGetProcAddress("glGetUniformfv");
	glGetUniformiv = cast(PFNGLGETUNIFORMIVPROC) glGetProcAddress("glGetUniformiv");
	glGetVertexAttribdv = cast(PFNGLGETVERTEXATTRIBDVPROC) glGetProcAddress("glGetVertexAttribdv");
	glGetVertexAttribfv = cast(PFNGLGETVERTEXATTRIBFVPROC) glGetProcAddress("glGetVertexAttribfv");
	glGetVertexAttribiv = cast(PFNGLGETVERTEXATTRIBIVPROC) glGetProcAddress("glGetVertexAttribiv");
	glGetVertexAttribPointerv = cast(PFNGLGETVERTEXATTRIBPOINTERVPROC) glGetProcAddress("glGetVertexAttribPointerv");
	glIsProgram = cast(PFNGLISPROGRAMPROC) glGetProcAddress("glIsProgram");
	glIsShader = cast(PFNGLISSHADERPROC) glGetProcAddress("glIsShader");
	glLinkProgram = cast(PFNGLLINKPROGRAMPROC) glGetProcAddress("glLinkProgram");
	glShaderSource = cast(PFNGLSHADERSOURCEPROC) glGetProcAddress("glShaderSource");
	glUseProgram = cast(PFNGLUSEPROGRAMPROC) glGetProcAddress("glUseProgram");
	glUniform1f = cast(PFNGLUNIFORM1FPROC) glGetProcAddress("glUniform1f");
	glUniform2f = cast(PFNGLUNIFORM2FPROC) glGetProcAddress("glUniform2f");
	glUniform3f = cast(PFNGLUNIFORM3FPROC) glGetProcAddress("glUniform3f");
	glUniform4f = cast(PFNGLUNIFORM4FPROC) glGetProcAddress("glUniform4f");
	glUniform1i = cast(PFNGLUNIFORM1IPROC) glGetProcAddress("glUniform1i");
	glUniform2i = cast(PFNGLUNIFORM2IPROC) glGetProcAddress("glUniform2i");
	glUniform3i = cast(PFNGLUNIFORM3IPROC) glGetProcAddress("glUniform3i");
	glUniform4i = cast(PFNGLUNIFORM4IPROC) glGetProcAddress("glUniform4i");
	glUniform1fv = cast(PFNGLUNIFORM1FVPROC) glGetProcAddress("glUniform1fv");
	glUniform2fv = cast(PFNGLUNIFORM2FVPROC) glGetProcAddress("glUniform2fv");
	glUniform3fv = cast(PFNGLUNIFORM3FVPROC) glGetProcAddress("glUniform3fv");
	glUniform4fv = cast(PFNGLUNIFORM4FVPROC) glGetProcAddress("glUniform4fv");
	glUniform1iv = cast(PFNGLUNIFORM1IVPROC) glGetProcAddress("glUniform1iv");
	glUniform2iv = cast(PFNGLUNIFORM2IVPROC) glGetProcAddress("glUniform2iv");
	glUniform3iv = cast(PFNGLUNIFORM3IVPROC) glGetProcAddress("glUniform3iv");
	glUniform4iv = cast(PFNGLUNIFORM4IVPROC) glGetProcAddress("glUniform4iv");
	glUniformMatrix2fv = cast(PFNGLUNIFORMMATRIX2FVPROC) glGetProcAddress("glUniformMatrix2fv");
	glUniformMatrix3fv = cast(PFNGLUNIFORMMATRIX3FVPROC) glGetProcAddress("glUniformMatrix3fv");
	glUniformMatrix4fv = cast(PFNGLUNIFORMMATRIX4FVPROC) glGetProcAddress("glUniformMatrix4fv");
	glValidateProgram = cast(PFNGLVALIDATEPROGRAMPROC) glGetProcAddress("glValidateProgram");
	glVertexAttrib1d = cast(PFNGLVERTEXATTRIB1DPROC) glGetProcAddress("glVertexAttrib1d");
	glVertexAttrib1dv = cast(PFNGLVERTEXATTRIB1DVPROC) glGetProcAddress("glVertexAttrib1dv");
	glVertexAttrib1f = cast(PFNGLVERTEXATTRIB1FPROC) glGetProcAddress("glVertexAttrib1f");
	glVertexAttrib1fv = cast(PFNGLVERTEXATTRIB1FVPROC) glGetProcAddress("glVertexAttrib1fv");
	glVertexAttrib1s = cast(PFNGLVERTEXATTRIB1SPROC) glGetProcAddress("glVertexAttrib1s");
	glVertexAttrib1sv = cast(PFNGLVERTEXATTRIB1SVPROC) glGetProcAddress("glVertexAttrib1sv");
	glVertexAttrib2d = cast(PFNGLVERTEXATTRIB2DPROC) glGetProcAddress("glVertexAttrib2d");
	glVertexAttrib2dv = cast(PFNGLVERTEXATTRIB2DVPROC) glGetProcAddress("glVertexAttrib2dv");
	glVertexAttrib2f = cast(PFNGLVERTEXATTRIB2FPROC) glGetProcAddress("glVertexAttrib2f");
	glVertexAttrib2fv = cast(PFNGLVERTEXATTRIB2FVPROC) glGetProcAddress("glVertexAttrib2fv");
	glVertexAttrib2s = cast(PFNGLVERTEXATTRIB2SPROC) glGetProcAddress("glVertexAttrib2s");
	glVertexAttrib2sv = cast(PFNGLVERTEXATTRIB2SVPROC) glGetProcAddress("glVertexAttrib2sv");
	glVertexAttrib3d = cast(PFNGLVERTEXATTRIB3DPROC) glGetProcAddress("glVertexAttrib3d");
	glVertexAttrib3dv = cast(PFNGLVERTEXATTRIB3DVPROC) glGetProcAddress("glVertexAttrib3dv");
	glVertexAttrib3f = cast(PFNGLVERTEXATTRIB3FPROC) glGetProcAddress("glVertexAttrib3f");
	glVertexAttrib3fv = cast(PFNGLVERTEXATTRIB3FVPROC) glGetProcAddress("glVertexAttrib3fv");
	glVertexAttrib3s = cast(PFNGLVERTEXATTRIB3SPROC) glGetProcAddress("glVertexAttrib3s");
	glVertexAttrib3sv = cast(PFNGLVERTEXATTRIB3SVPROC) glGetProcAddress("glVertexAttrib3sv");
	glVertexAttrib4Nbv = cast(PFNGLVERTEXATTRIB4NBVPROC) glGetProcAddress("glVertexAttrib4Nbv");
	glVertexAttrib4Niv = cast(PFNGLVERTEXATTRIB4NIVPROC) glGetProcAddress("glVertexAttrib4Niv");
	glVertexAttrib4Nsv = cast(PFNGLVERTEXATTRIB4NSVPROC) glGetProcAddress("glVertexAttrib4Nsv");
	glVertexAttrib4Nub = cast(PFNGLVERTEXATTRIB4NUBPROC) glGetProcAddress("glVertexAttrib4Nub");
	glVertexAttrib4Nubv = cast(PFNGLVERTEXATTRIB4NUBVPROC) glGetProcAddress("glVertexAttrib4Nubv");
	glVertexAttrib4Nuiv = cast(PFNGLVERTEXATTRIB4NUIVPROC) glGetProcAddress("glVertexAttrib4Nuiv");
	glVertexAttrib4Nusv = cast(PFNGLVERTEXATTRIB4NUSVPROC) glGetProcAddress("glVertexAttrib4Nusv");
	glVertexAttrib4bv = cast(PFNGLVERTEXATTRIB4BVPROC) glGetProcAddress("glVertexAttrib4bv");
	glVertexAttrib4d = cast(PFNGLVERTEXATTRIB4DPROC) glGetProcAddress("glVertexAttrib4d");
	glVertexAttrib4dv = cast(PFNGLVERTEXATTRIB4DVPROC) glGetProcAddress("glVertexAttrib4dv");
	glVertexAttrib4f = cast(PFNGLVERTEXATTRIB4FPROC) glGetProcAddress("glVertexAttrib4f");
	glVertexAttrib4fv = cast(PFNGLVERTEXATTRIB4FVPROC) glGetProcAddress("glVertexAttrib4fv");
	glVertexAttrib4iv = cast(PFNGLVERTEXATTRIB4IVPROC) glGetProcAddress("glVertexAttrib4iv");
	glVertexAttrib4s = cast(PFNGLVERTEXATTRIB4SPROC) glGetProcAddress("glVertexAttrib4s");
	glVertexAttrib4sv = cast(PFNGLVERTEXATTRIB4SVPROC) glGetProcAddress("glVertexAttrib4sv");
	glVertexAttrib4ubv = cast(PFNGLVERTEXATTRIB4UBVPROC) glGetProcAddress("glVertexAttrib4ubv");
	glVertexAttrib4uiv = cast(PFNGLVERTEXATTRIB4UIVPROC) glGetProcAddress("glVertexAttrib4uiv");
	glVertexAttrib4usv = cast(PFNGLVERTEXATTRIB4USVPROC) glGetProcAddress("glVertexAttrib4usv");
	glVertexAttribPointer = cast(PFNGLVERTEXATTRIBPOINTERPROC) glGetProcAddress("glVertexAttribPointer");
}

extern (System) __gshared nothrow:

// GL_VERSION_1_0
alias uint GLenum;
alias float GLfloat;
alias int GLint;
alias int GLsizei;
alias void GLvoid;
alias uint GLbitfield;
alias double GLdouble;
alias uint GLuint;
alias ubyte GLboolean;
alias ubyte GLubyte;
alias void function(GLenum mode) PFNGLCULLFACEPROC;
alias void function(GLenum mode) PFNGLFRONTFACEPROC;
alias void function(GLenum target, GLenum mode) PFNGLHINTPROC;
alias void function(GLfloat width) PFNGLLINEWIDTHPROC;
alias void function(GLfloat size) PFNGLPOINTSIZEPROC;
alias void function(GLenum face, GLenum mode) PFNGLPOLYGONMODEPROC;
alias void function(GLint x, GLint y, GLsizei width, GLsizei height) PFNGLSCISSORPROC;
alias void function(GLenum target, GLenum pname, GLfloat param) PFNGLTEXPARAMETERFPROC;
alias void function(GLenum target, GLenum pname, const(GLfloat)* params) PFNGLTEXPARAMETERFVPROC;
alias void function(GLenum target, GLenum pname, GLint param) PFNGLTEXPARAMETERIPROC;
alias void function(GLenum target, GLenum pname, const(GLint)* params) PFNGLTEXPARAMETERIVPROC;
alias void function(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const(GLvoid)* pixels) PFNGLTEXIMAGE1DPROC;
alias void function(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const(GLvoid)* pixels) PFNGLTEXIMAGE2DPROC;
alias void function(GLenum mode) PFNGLDRAWBUFFERPROC;
alias void function(GLbitfield mask) PFNGLCLEARPROC;
alias void function(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) PFNGLCLEARCOLORPROC;
alias void function(GLint s) PFNGLCLEARSTENCILPROC;
alias void function(GLdouble depth) PFNGLCLEARDEPTHPROC;
alias void function(GLuint mask) PFNGLSTENCILMASKPROC;
alias void function(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) PFNGLCOLORMASKPROC;
alias void function(GLboolean flag) PFNGLDEPTHMASKPROC;
alias void function(GLenum cap) PFNGLDISABLEPROC;
alias void function(GLenum cap) PFNGLENABLEPROC;
alias void function() PFNGLFINISHPROC;
alias void function() PFNGLFLUSHPROC;
alias void function(GLenum sfactor, GLenum dfactor) PFNGLBLENDFUNCPROC;
alias void function(GLenum opcode) PFNGLLOGICOPPROC;
alias void function(GLenum func, GLint ref_, GLuint mask) PFNGLSTENCILFUNCPROC;
alias void function(GLenum fail, GLenum zfail, GLenum zpass) PFNGLSTENCILOPPROC;
alias void function(GLenum func) PFNGLDEPTHFUNCPROC;
alias void function(GLenum pname, GLfloat param) PFNGLPIXELSTOREFPROC;
alias void function(GLenum pname, GLint param) PFNGLPIXELSTOREIPROC;
alias void function(GLenum mode) PFNGLREADBUFFERPROC;
alias void function(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels) PFNGLREADPIXELSPROC;
alias void function(GLenum pname, GLboolean* params) PFNGLGETBOOLEANVPROC;
alias void function(GLenum pname, GLdouble* params) PFNGLGETDOUBLEVPROC;
alias GLenum function() PFNGLGETERRORPROC;
alias void function(GLenum pname, GLfloat* params) PFNGLGETFLOATVPROC;
alias void function(GLenum pname, GLint* params) PFNGLGETINTEGERVPROC;
alias const(GLubyte)* function(GLenum name) PFNGLGETSTRINGPROC;
alias void function(GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels) PFNGLGETTEXIMAGEPROC;
alias void function(GLenum target, GLenum pname, GLfloat* params) PFNGLGETTEXPARAMETERFVPROC;
alias void function(GLenum target, GLenum pname, GLint* params) PFNGLGETTEXPARAMETERIVPROC;
alias void function(GLenum target, GLint level, GLenum pname, GLfloat* params) PFNGLGETTEXLEVELPARAMETERFVPROC;
alias void function(GLenum target, GLint level, GLenum pname, GLint* params) PFNGLGETTEXLEVELPARAMETERIVPROC;
alias GLboolean function(GLenum cap) PFNGLISENABLEDPROC;
alias void function(GLdouble near, GLdouble far) PFNGLDEPTHRANGEPROC;
alias void function(GLint x, GLint y, GLsizei width, GLsizei height) PFNGLVIEWPORTPROC;
PFNGLCULLFACEPROC glCullFace;
PFNGLFRONTFACEPROC glFrontFace;
PFNGLHINTPROC glHint;
PFNGLLINEWIDTHPROC glLineWidth;
PFNGLPOINTSIZEPROC glPointSize;
PFNGLPOLYGONMODEPROC glPolygonMode;
PFNGLSCISSORPROC glScissor;
PFNGLTEXPARAMETERFPROC glTexParameterf;
PFNGLTEXPARAMETERFVPROC glTexParameterfv;
PFNGLTEXPARAMETERIPROC glTexParameteri;
PFNGLTEXPARAMETERIVPROC glTexParameteriv;
PFNGLTEXIMAGE1DPROC glTexImage1D;
PFNGLTEXIMAGE2DPROC glTexImage2D;
PFNGLDRAWBUFFERPROC glDrawBuffer;
PFNGLCLEARPROC glClear;
PFNGLCLEARCOLORPROC glClearColor;
PFNGLCLEARSTENCILPROC glClearStencil;
PFNGLCLEARDEPTHPROC glClearDepth;
PFNGLSTENCILMASKPROC glStencilMask;
PFNGLCOLORMASKPROC glColorMask;
PFNGLDEPTHMASKPROC glDepthMask;
PFNGLDISABLEPROC glDisable;
PFNGLENABLEPROC glEnable;
PFNGLFINISHPROC glFinish;
PFNGLFLUSHPROC glFlush;
PFNGLBLENDFUNCPROC glBlendFunc;
PFNGLLOGICOPPROC glLogicOp;
PFNGLSTENCILFUNCPROC glStencilFunc;
PFNGLSTENCILOPPROC glStencilOp;
PFNGLDEPTHFUNCPROC glDepthFunc;
PFNGLPIXELSTOREFPROC glPixelStoref;
PFNGLPIXELSTOREIPROC glPixelStorei;
PFNGLREADBUFFERPROC glReadBuffer;
PFNGLREADPIXELSPROC glReadPixels;
PFNGLGETBOOLEANVPROC glGetBooleanv;
PFNGLGETDOUBLEVPROC glGetDoublev;
PFNGLGETERRORPROC glGetError;
PFNGLGETFLOATVPROC glGetFloatv;
PFNGLGETINTEGERVPROC glGetIntegerv;
PFNGLGETSTRINGPROC glGetString;
PFNGLGETTEXIMAGEPROC glGetTexImage;
PFNGLGETTEXPARAMETERFVPROC glGetTexParameterfv;
PFNGLGETTEXPARAMETERIVPROC glGetTexParameteriv;
PFNGLGETTEXLEVELPARAMETERFVPROC glGetTexLevelParameterfv;
PFNGLGETTEXLEVELPARAMETERIVPROC glGetTexLevelParameteriv;
PFNGLISENABLEDPROC glIsEnabled;
PFNGLDEPTHRANGEPROC glDepthRange;
PFNGLVIEWPORTPROC glViewport;

// GL_VERSION_1_1
alias float GLclampf;
alias double GLclampd;
enum GL_DEPTH_BUFFER_BIT = 0x00000100;
enum GL_STENCIL_BUFFER_BIT = 0x00000400;
enum GL_COLOR_BUFFER_BIT = 0x00004000;
enum GL_FALSE = 0;
enum GL_TRUE = 1;
enum GL_POINTS = 0x0000;
enum GL_LINES = 0x0001;
enum GL_LINE_LOOP = 0x0002;
enum GL_LINE_STRIP = 0x0003;
enum GL_TRIANGLES = 0x0004;
enum GL_TRIANGLE_STRIP = 0x0005;
enum GL_TRIANGLE_FAN = 0x0006;
enum GL_QUADS = 0x0007;
enum GL_NEVER = 0x0200;
enum GL_LESS = 0x0201;
enum GL_EQUAL = 0x0202;
enum GL_LEQUAL = 0x0203;
enum GL_GREATER = 0x0204;
enum GL_NOTEQUAL = 0x0205;
enum GL_GEQUAL = 0x0206;
enum GL_ALWAYS = 0x0207;
enum GL_ZERO = 0;
enum GL_ONE = 1;
enum GL_SRC_COLOR = 0x0300;
enum GL_ONE_MINUS_SRC_COLOR = 0x0301;
enum GL_SRC_ALPHA = 0x0302;
enum GL_ONE_MINUS_SRC_ALPHA = 0x0303;
enum GL_DST_ALPHA = 0x0304;
enum GL_ONE_MINUS_DST_ALPHA = 0x0305;
enum GL_DST_COLOR = 0x0306;
enum GL_ONE_MINUS_DST_COLOR = 0x0307;
enum GL_SRC_ALPHA_SATURATE = 0x0308;
enum GL_NONE = 0;
enum GL_FRONT_LEFT = 0x0400;
enum GL_FRONT_RIGHT = 0x0401;
enum GL_BACK_LEFT = 0x0402;
enum GL_BACK_RIGHT = 0x0403;
enum GL_FRONT = 0x0404;
enum GL_BACK = 0x0405;
enum GL_LEFT = 0x0406;
enum GL_RIGHT = 0x0407;
enum GL_FRONT_AND_BACK = 0x0408;
enum GL_NO_ERROR = 0;
enum GL_INVALID_ENUM = 0x0500;
enum GL_INVALID_VALUE = 0x0501;
enum GL_INVALID_OPERATION = 0x0502;
enum GL_OUT_OF_MEMORY = 0x0505;
enum GL_CW = 0x0900;
enum GL_CCW = 0x0901;
enum GL_POINT_SIZE = 0x0B11;
enum GL_POINT_SIZE_RANGE = 0x0B12;
enum GL_POINT_SIZE_GRANULARITY = 0x0B13;
enum GL_LINE_SMOOTH = 0x0B20;
enum GL_LINE_WIDTH = 0x0B21;
enum GL_LINE_WIDTH_RANGE = 0x0B22;
enum GL_LINE_WIDTH_GRANULARITY = 0x0B23;
enum GL_POLYGON_MODE = 0x0B40;
enum GL_POLYGON_SMOOTH = 0x0B41;
enum GL_CULL_FACE = 0x0B44;
enum GL_CULL_FACE_MODE = 0x0B45;
enum GL_FRONT_FACE = 0x0B46;
enum GL_DEPTH_RANGE = 0x0B70;
enum GL_DEPTH_TEST = 0x0B71;
enum GL_DEPTH_WRITEMASK = 0x0B72;
enum GL_DEPTH_CLEAR_VALUE = 0x0B73;
enum GL_DEPTH_FUNC = 0x0B74;
enum GL_STENCIL_TEST = 0x0B90;
enum GL_STENCIL_CLEAR_VALUE = 0x0B91;
enum GL_STENCIL_FUNC = 0x0B92;
enum GL_STENCIL_VALUE_MASK = 0x0B93;
enum GL_STENCIL_FAIL = 0x0B94;
enum GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
enum GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
enum GL_STENCIL_REF = 0x0B97;
enum GL_STENCIL_WRITEMASK = 0x0B98;
enum GL_VIEWPORT = 0x0BA2;
enum GL_DITHER = 0x0BD0;
enum GL_BLEND_DST = 0x0BE0;
enum GL_BLEND_SRC = 0x0BE1;
enum GL_BLEND = 0x0BE2;
enum GL_LOGIC_OP_MODE = 0x0BF0;
enum GL_COLOR_LOGIC_OP = 0x0BF2;
enum GL_DRAW_BUFFER = 0x0C01;
enum GL_READ_BUFFER = 0x0C02;
enum GL_SCISSOR_BOX = 0x0C10;
enum GL_SCISSOR_TEST = 0x0C11;
enum GL_COLOR_CLEAR_VALUE = 0x0C22;
enum GL_COLOR_WRITEMASK = 0x0C23;
enum GL_DOUBLEBUFFER = 0x0C32;
enum GL_STEREO = 0x0C33;
enum GL_LINE_SMOOTH_HINT = 0x0C52;
enum GL_POLYGON_SMOOTH_HINT = 0x0C53;
enum GL_UNPACK_SWAP_BYTES = 0x0CF0;
enum GL_UNPACK_LSB_FIRST = 0x0CF1;
enum GL_UNPACK_ROW_LENGTH = 0x0CF2;
enum GL_UNPACK_SKIP_ROWS = 0x0CF3;
enum GL_UNPACK_SKIP_PIXELS = 0x0CF4;
enum GL_UNPACK_ALIGNMENT = 0x0CF5;
enum GL_PACK_SWAP_BYTES = 0x0D00;
enum GL_PACK_LSB_FIRST = 0x0D01;
enum GL_PACK_ROW_LENGTH = 0x0D02;
enum GL_PACK_SKIP_ROWS = 0x0D03;
enum GL_PACK_SKIP_PIXELS = 0x0D04;
enum GL_PACK_ALIGNMENT = 0x0D05;
enum GL_MAX_TEXTURE_SIZE = 0x0D33;
enum GL_MAX_VIEWPORT_DIMS = 0x0D3A;
enum GL_SUBPIXEL_BITS = 0x0D50;
enum GL_TEXTURE_1D = 0x0DE0;
enum GL_TEXTURE_2D = 0x0DE1;
enum GL_POLYGON_OFFSET_UNITS = 0x2A00;
enum GL_POLYGON_OFFSET_POINT = 0x2A01;
enum GL_POLYGON_OFFSET_LINE = 0x2A02;
enum GL_POLYGON_OFFSET_FILL = 0x8037;
enum GL_POLYGON_OFFSET_FACTOR = 0x8038;
enum GL_TEXTURE_BINDING_1D = 0x8068;
enum GL_TEXTURE_BINDING_2D = 0x8069;
enum GL_TEXTURE_WIDTH = 0x1000;
enum GL_TEXTURE_HEIGHT = 0x1001;
enum GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
enum GL_TEXTURE_BORDER_COLOR = 0x1004;
enum GL_TEXTURE_RED_SIZE = 0x805C;
enum GL_TEXTURE_GREEN_SIZE = 0x805D;
enum GL_TEXTURE_BLUE_SIZE = 0x805E;
enum GL_TEXTURE_ALPHA_SIZE = 0x805F;
enum GL_DONT_CARE = 0x1100;
enum GL_FASTEST = 0x1101;
enum GL_NICEST = 0x1102;
enum GL_BYTE = 0x1400;
enum GL_UNSIGNED_BYTE = 0x1401;
enum GL_SHORT = 0x1402;
enum GL_UNSIGNED_SHORT = 0x1403;
enum GL_INT = 0x1404;
enum GL_UNSIGNED_INT = 0x1405;
enum GL_FLOAT = 0x1406;
enum GL_DOUBLE = 0x140A;
enum GL_STACK_OVERFLOW = 0x0503;
enum GL_STACK_UNDERFLOW = 0x0504;
enum GL_CLEAR = 0x1500;
enum GL_AND = 0x1501;
enum GL_AND_REVERSE = 0x1502;
enum GL_COPY = 0x1503;
enum GL_AND_INVERTED = 0x1504;
enum GL_NOOP = 0x1505;
enum GL_XOR = 0x1506;
enum GL_OR = 0x1507;
enum GL_NOR = 0x1508;
enum GL_EQUIV = 0x1509;
enum GL_INVERT = 0x150A;
enum GL_OR_REVERSE = 0x150B;
enum GL_COPY_INVERTED = 0x150C;
enum GL_OR_INVERTED = 0x150D;
enum GL_NAND = 0x150E;
enum GL_SET = 0x150F;
enum GL_TEXTURE = 0x1702;
enum GL_COLOR = 0x1800;
enum GL_DEPTH = 0x1801;
enum GL_STENCIL = 0x1802;
enum GL_STENCIL_INDEX = 0x1901;
enum GL_DEPTH_COMPONENT = 0x1902;
enum GL_RED = 0x1903;
enum GL_GREEN = 0x1904;
enum GL_BLUE = 0x1905;
enum GL_ALPHA = 0x1906;
enum GL_RGB = 0x1907;
enum GL_RGBA = 0x1908;
enum GL_POINT = 0x1B00;
enum GL_LINE = 0x1B01;
enum GL_FILL = 0x1B02;
enum GL_KEEP = 0x1E00;
enum GL_REPLACE = 0x1E01;
enum GL_INCR = 0x1E02;
enum GL_DECR = 0x1E03;
enum GL_VENDOR = 0x1F00;
enum GL_RENDERER = 0x1F01;
enum GL_VERSION = 0x1F02;
enum GL_EXTENSIONS = 0x1F03;
enum GL_NEAREST = 0x2600;
enum GL_LINEAR = 0x2601;
enum GL_NEAREST_MIPMAP_NEAREST = 0x2700;
enum GL_LINEAR_MIPMAP_NEAREST = 0x2701;
enum GL_NEAREST_MIPMAP_LINEAR = 0x2702;
enum GL_LINEAR_MIPMAP_LINEAR = 0x2703;
enum GL_TEXTURE_MAG_FILTER = 0x2800;
enum GL_TEXTURE_MIN_FILTER = 0x2801;
enum GL_TEXTURE_WRAP_S = 0x2802;
enum GL_TEXTURE_WRAP_T = 0x2803;
enum GL_PROXY_TEXTURE_1D = 0x8063;
enum GL_PROXY_TEXTURE_2D = 0x8064;
enum GL_REPEAT = 0x2901;
enum GL_R3_G3_B2 = 0x2A10;
enum GL_RGB4 = 0x804F;
enum GL_RGB5 = 0x8050;
enum GL_RGB8 = 0x8051;
enum GL_RGB10 = 0x8052;
enum GL_RGB12 = 0x8053;
enum GL_RGB16 = 0x8054;
enum GL_RGBA2 = 0x8055;
enum GL_RGBA4 = 0x8056;
enum GL_RGB5_A1 = 0x8057;
enum GL_RGBA8 = 0x8058;
enum GL_RGB10_A2 = 0x8059;
enum GL_RGBA12 = 0x805A;
enum GL_RGBA16 = 0x805B;
enum GL_VERTEX_ARRAY = 0x8074;
alias void function(GLenum mode, GLint first, GLsizei count) PFNGLDRAWARRAYSPROC;
alias void function(GLenum mode, GLsizei count, GLenum type, const(GLvoid)* indices) PFNGLDRAWELEMENTSPROC;
alias void function(GLenum pname, GLvoid* *params) PFNGLGETPOINTERVPROC;
alias void function(GLfloat factor, GLfloat units) PFNGLPOLYGONOFFSETPROC;
alias void function(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) PFNGLCOPYTEXIMAGE1DPROC;
alias void function(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) PFNGLCOPYTEXIMAGE2DPROC;
alias void function(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) PFNGLCOPYTEXSUBIMAGE1DPROC;
alias void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) PFNGLCOPYTEXSUBIMAGE2DPROC;
alias void function(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const(GLvoid)* pixels) PFNGLTEXSUBIMAGE1DPROC;
alias void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const(GLvoid)* pixels) PFNGLTEXSUBIMAGE2DPROC;
alias void function(GLenum target, GLuint texture) PFNGLBINDTEXTUREPROC;
alias void function(GLsizei n, const(GLuint)* textures) PFNGLDELETETEXTURESPROC;
alias void function(GLsizei n, GLuint* textures) PFNGLGENTEXTURESPROC;
alias GLboolean function(GLuint texture) PFNGLISTEXTUREPROC;
PFNGLDRAWARRAYSPROC glDrawArrays;
PFNGLDRAWELEMENTSPROC glDrawElements;
PFNGLGETPOINTERVPROC glGetPointerv;
PFNGLPOLYGONOFFSETPROC glPolygonOffset;
PFNGLCOPYTEXIMAGE1DPROC glCopyTexImage1D;
PFNGLCOPYTEXIMAGE2DPROC glCopyTexImage2D;
PFNGLCOPYTEXSUBIMAGE1DPROC glCopyTexSubImage1D;
PFNGLCOPYTEXSUBIMAGE2DPROC glCopyTexSubImage2D;
PFNGLTEXSUBIMAGE1DPROC glTexSubImage1D;
PFNGLTEXSUBIMAGE2DPROC glTexSubImage2D;
PFNGLBINDTEXTUREPROC glBindTexture;
PFNGLDELETETEXTURESPROC glDeleteTextures;
PFNGLGENTEXTURESPROC glGenTextures;
PFNGLISTEXTUREPROC glIsTexture;

// GL_VERSION_1_2
enum GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
enum GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
enum GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
enum GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
enum GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
enum GL_TEXTURE_BINDING_3D = 0x806A;
enum GL_PACK_SKIP_IMAGES = 0x806B;
enum GL_PACK_IMAGE_HEIGHT = 0x806C;
enum GL_UNPACK_SKIP_IMAGES = 0x806D;
enum GL_UNPACK_IMAGE_HEIGHT = 0x806E;
enum GL_TEXTURE_3D = 0x806F;
enum GL_PROXY_TEXTURE_3D = 0x8070;
enum GL_TEXTURE_DEPTH = 0x8071;
enum GL_TEXTURE_WRAP_R = 0x8072;
enum GL_MAX_3D_TEXTURE_SIZE = 0x8073;
enum GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
enum GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
enum GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
enum GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
enum GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
enum GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
enum GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
enum GL_BGR = 0x80E0;
enum GL_BGRA = 0x80E1;
enum GL_MAX_ELEMENTS_VERTICES = 0x80E8;
enum GL_MAX_ELEMENTS_INDICES = 0x80E9;
enum GL_CLAMP_TO_EDGE = 0x812F;
enum GL_TEXTURE_MIN_LOD = 0x813A;
enum GL_TEXTURE_MAX_LOD = 0x813B;
enum GL_TEXTURE_BASE_LEVEL = 0x813C;
enum GL_TEXTURE_MAX_LEVEL = 0x813D;
enum GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
enum GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
enum GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
enum GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
enum GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
alias void function(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) PFNGLBLENDCOLORPROC;
alias void function(GLenum mode) PFNGLBLENDEQUATIONPROC;
alias void function(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(GLvoid)* indices) PFNGLDRAWRANGEELEMENTSPROC;
alias void function(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const(GLvoid)* pixels) PFNGLTEXIMAGE3DPROC;
alias void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const(GLvoid)* pixels) PFNGLTEXSUBIMAGE3DPROC;
alias void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) PFNGLCOPYTEXSUBIMAGE3DPROC;
PFNGLBLENDCOLORPROC glBlendColor;
PFNGLBLENDEQUATIONPROC glBlendEquation;
PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
PFNGLTEXIMAGE3DPROC glTexImage3D;
PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;

// GL_VERSION_1_3
enum GL_TEXTURE0 = 0x84C0;
enum GL_TEXTURE1 = 0x84C1;
enum GL_TEXTURE2 = 0x84C2;
enum GL_TEXTURE3 = 0x84C3;
enum GL_TEXTURE4 = 0x84C4;
enum GL_TEXTURE5 = 0x84C5;
enum GL_TEXTURE6 = 0x84C6;
enum GL_TEXTURE7 = 0x84C7;
enum GL_TEXTURE8 = 0x84C8;
enum GL_TEXTURE9 = 0x84C9;
enum GL_TEXTURE10 = 0x84CA;
enum GL_TEXTURE11 = 0x84CB;
enum GL_TEXTURE12 = 0x84CC;
enum GL_TEXTURE13 = 0x84CD;
enum GL_TEXTURE14 = 0x84CE;
enum GL_TEXTURE15 = 0x84CF;
enum GL_TEXTURE16 = 0x84D0;
enum GL_TEXTURE17 = 0x84D1;
enum GL_TEXTURE18 = 0x84D2;
enum GL_TEXTURE19 = 0x84D3;
enum GL_TEXTURE20 = 0x84D4;
enum GL_TEXTURE21 = 0x84D5;
enum GL_TEXTURE22 = 0x84D6;
enum GL_TEXTURE23 = 0x84D7;
enum GL_TEXTURE24 = 0x84D8;
enum GL_TEXTURE25 = 0x84D9;
enum GL_TEXTURE26 = 0x84DA;
enum GL_TEXTURE27 = 0x84DB;
enum GL_TEXTURE28 = 0x84DC;
enum GL_TEXTURE29 = 0x84DD;
enum GL_TEXTURE30 = 0x84DE;
enum GL_TEXTURE31 = 0x84DF;
enum GL_ACTIVE_TEXTURE = 0x84E0;
enum GL_MULTISAMPLE = 0x809D;
enum GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
enum GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
enum GL_SAMPLE_COVERAGE = 0x80A0;
enum GL_SAMPLE_BUFFERS = 0x80A8;
enum GL_SAMPLES = 0x80A9;
enum GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
enum GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
enum GL_TEXTURE_CUBE_MAP = 0x8513;
enum GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
enum GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
enum GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
enum GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
enum GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
enum GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
enum GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
enum GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
enum GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
enum GL_COMPRESSED_RGB = 0x84ED;
enum GL_COMPRESSED_RGBA = 0x84EE;
enum GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
enum GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
enum GL_TEXTURE_COMPRESSED = 0x86A1;
enum GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
enum GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
enum GL_CLAMP_TO_BORDER = 0x812D;
alias void function(GLenum texture) PFNGLACTIVETEXTUREPROC;
alias void function(GLfloat value, GLboolean invert) PFNGLSAMPLECOVERAGEPROC;
alias void function(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const(GLvoid)* data) PFNGLCOMPRESSEDTEXIMAGE3DPROC;
alias void function(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const(GLvoid)* data) PFNGLCOMPRESSEDTEXIMAGE2DPROC;
alias void function(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const(GLvoid)* data) PFNGLCOMPRESSEDTEXIMAGE1DPROC;
alias void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const(GLvoid)* data) PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC;
alias void function(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const(GLvoid)* data) PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC;
alias void function(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const(GLvoid)* data) PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC;
alias void function(GLenum target, GLint level, GLvoid* img) PFNGLGETCOMPRESSEDTEXIMAGEPROC;
PFNGLACTIVETEXTUREPROC glActiveTexture;
PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;

// GL_VERSION_1_4
enum GL_BLEND_DST_RGB = 0x80C8;
enum GL_BLEND_SRC_RGB = 0x80C9;
enum GL_BLEND_DST_ALPHA = 0x80CA;
enum GL_BLEND_SRC_ALPHA = 0x80CB;
enum GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
enum GL_DEPTH_COMPONENT16 = 0x81A5;
enum GL_DEPTH_COMPONENT24 = 0x81A6;
enum GL_DEPTH_COMPONENT32 = 0x81A7;
enum GL_MIRRORED_REPEAT = 0x8370;
enum GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
enum GL_TEXTURE_LOD_BIAS = 0x8501;
enum GL_INCR_WRAP = 0x8507;
enum GL_DECR_WRAP = 0x8508;
enum GL_TEXTURE_DEPTH_SIZE = 0x884A;
enum GL_TEXTURE_COMPARE_MODE = 0x884C;
enum GL_TEXTURE_COMPARE_FUNC = 0x884D;
enum GL_FUNC_ADD = 0x8006;
enum GL_FUNC_SUBTRACT = 0x800A;
enum GL_FUNC_REVERSE_SUBTRACT = 0x800B;
enum GL_MIN = 0x8007;
enum GL_MAX = 0x8008;
enum GL_CONSTANT_COLOR = 0x8001;
enum GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
enum GL_CONSTANT_ALPHA = 0x8003;
enum GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
alias void function(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) PFNGLBLENDFUNCSEPARATEPROC;
alias void function(GLenum mode, const(GLint)* first, const(GLsizei)* count, GLsizei drawcount) PFNGLMULTIDRAWARRAYSPROC;
alias void function(GLenum mode, const(GLsizei)* count, GLenum type, const(GLvoid*)* indices, GLsizei drawcount) PFNGLMULTIDRAWELEMENTSPROC;
alias void function(GLenum pname, GLfloat param) PFNGLPOINTPARAMETERFPROC;
alias void function(GLenum pname, const(GLfloat)* params) PFNGLPOINTPARAMETERFVPROC;
alias void function(GLenum pname, GLint param) PFNGLPOINTPARAMETERIPROC;
alias void function(GLenum pname, const(GLint)* params) PFNGLPOINTPARAMETERIVPROC;
PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
PFNGLPOINTPARAMETERFPROC glPointParameterf;
PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
PFNGLPOINTPARAMETERIPROC glPointParameteri;
PFNGLPOINTPARAMETERIVPROC glPointParameteriv;

// GL_VERSION_1_5
alias ptrdiff_t GLsizeiptr;
alias ptrdiff_t GLintptr;
enum GL_BUFFER_SIZE = 0x8764;
enum GL_BUFFER_USAGE = 0x8765;
enum GL_QUERY_COUNTER_BITS = 0x8864;
enum GL_CURRENT_QUERY = 0x8865;
enum GL_QUERY_RESULT = 0x8866;
enum GL_QUERY_RESULT_AVAILABLE = 0x8867;
enum GL_ARRAY_BUFFER = 0x8892;
enum GL_ELEMENT_ARRAY_BUFFER = 0x8893;
enum GL_ARRAY_BUFFER_BINDING = 0x8894;
enum GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
enum GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
enum GL_READ_ONLY = 0x88B8;
enum GL_WRITE_ONLY = 0x88B9;
enum GL_READ_WRITE = 0x88BA;
enum GL_BUFFER_ACCESS = 0x88BB;
enum GL_BUFFER_MAPPED = 0x88BC;
enum GL_BUFFER_MAP_POINTER = 0x88BD;
enum GL_STREAM_DRAW = 0x88E0;
enum GL_STREAM_READ = 0x88E1;
enum GL_STREAM_COPY = 0x88E2;
enum GL_STATIC_DRAW = 0x88E4;
enum GL_STATIC_READ = 0x88E5;
enum GL_STATIC_COPY = 0x88E6;
enum GL_DYNAMIC_DRAW = 0x88E8;
enum GL_DYNAMIC_READ = 0x88E9;
enum GL_DYNAMIC_COPY = 0x88EA;
enum GL_SAMPLES_PASSED = 0x8914;
enum GL_SRC1_ALPHA = 0x8589;
alias void function(GLsizei n, GLuint* ids) PFNGLGENQUERIESPROC;
alias void function(GLsizei n, const(GLuint)* ids) PFNGLDELETEQUERIESPROC;
alias GLboolean function(GLuint id) PFNGLISQUERYPROC;
alias void function(GLenum target, GLuint id) PFNGLBEGINQUERYPROC;
alias void function(GLenum target) PFNGLENDQUERYPROC;
alias void function(GLenum target, GLenum pname, GLint* params) PFNGLGETQUERYIVPROC;
alias void function(GLuint id, GLenum pname, GLint* params) PFNGLGETQUERYOBJECTIVPROC;
alias void function(GLuint id, GLenum pname, GLuint* params) PFNGLGETQUERYOBJECTUIVPROC;
alias void function(GLenum target, GLuint buffer) PFNGLBINDBUFFERPROC;
alias void function(GLsizei n, const(GLuint)* buffers) PFNGLDELETEBUFFERSPROC;
alias void function(GLsizei n, GLuint* buffers) PFNGLGENBUFFERSPROC;
alias GLboolean function(GLuint buffer) PFNGLISBUFFERPROC;
alias void function(GLenum target, GLsizeiptr size, const(GLvoid)* data, GLenum usage) PFNGLBUFFERDATAPROC;
alias void function(GLenum target, GLintptr offset, GLsizeiptr size, const(GLvoid)* data) PFNGLBUFFERSUBDATAPROC;
alias void function(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid* data) PFNGLGETBUFFERSUBDATAPROC;
alias void *function(GLenum target, GLenum access) PFNGLMAPBUFFERPROC;
alias GLboolean function(GLenum target) PFNGLUNMAPBUFFERPROC;
alias void function(GLenum target, GLenum pname, GLint* params) PFNGLGETBUFFERPARAMETERIVPROC;
alias void function(GLenum target, GLenum pname, GLvoid* *params) PFNGLGETBUFFERPOINTERVPROC;
PFNGLGENQUERIESPROC glGenQueries;
PFNGLDELETEQUERIESPROC glDeleteQueries;
PFNGLISQUERYPROC glIsQuery;
PFNGLBEGINQUERYPROC glBeginQuery;
PFNGLENDQUERYPROC glEndQuery;
PFNGLGETQUERYIVPROC glGetQueryiv;
PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
PFNGLBINDBUFFERPROC glBindBuffer;
PFNGLDELETEBUFFERSPROC glDeleteBuffers;
PFNGLGENBUFFERSPROC glGenBuffers;
PFNGLISBUFFERPROC glIsBuffer;
PFNGLBUFFERDATAPROC glBufferData;
PFNGLBUFFERSUBDATAPROC glBufferSubData;
PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
PFNGLMAPBUFFERPROC glMapBuffer;
PFNGLUNMAPBUFFERPROC glUnmapBuffer;
PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;

// GL_VERSION_2_0
alias char GLchar;
alias short GLshort;
alias byte GLbyte;
alias ushort GLushort;
enum GL_BLEND_EQUATION_RGB = 0x8009;
enum GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
enum GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
enum GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
enum GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
enum GL_CURRENT_VERTEX_ATTRIB = 0x8626;
enum GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
enum GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
enum GL_STENCIL_BACK_FUNC = 0x8800;
enum GL_STENCIL_BACK_FAIL = 0x8801;
enum GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
enum GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
enum GL_MAX_DRAW_BUFFERS = 0x8824;
enum GL_DRAW_BUFFER0 = 0x8825;
enum GL_DRAW_BUFFER1 = 0x8826;
enum GL_DRAW_BUFFER2 = 0x8827;
enum GL_DRAW_BUFFER3 = 0x8828;
enum GL_DRAW_BUFFER4 = 0x8829;
enum GL_DRAW_BUFFER5 = 0x882A;
enum GL_DRAW_BUFFER6 = 0x882B;
enum GL_DRAW_BUFFER7 = 0x882C;
enum GL_DRAW_BUFFER8 = 0x882D;
enum GL_DRAW_BUFFER9 = 0x882E;
enum GL_DRAW_BUFFER10 = 0x882F;
enum GL_DRAW_BUFFER11 = 0x8830;
enum GL_DRAW_BUFFER12 = 0x8831;
enum GL_DRAW_BUFFER13 = 0x8832;
enum GL_DRAW_BUFFER14 = 0x8833;
enum GL_DRAW_BUFFER15 = 0x8834;
enum GL_BLEND_EQUATION_ALPHA = 0x883D;
enum GL_MAX_VERTEX_ATTRIBS = 0x8869;
enum GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
enum GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
enum GL_FRAGMENT_SHADER = 0x8B30;
enum GL_VERTEX_SHADER = 0x8B31;
enum GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
enum GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
enum GL_MAX_VARYING_FLOATS = 0x8B4B;
enum GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
enum GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
enum GL_SHADER_TYPE = 0x8B4F;
enum GL_FLOAT_VEC2 = 0x8B50;
enum GL_FLOAT_VEC3 = 0x8B51;
enum GL_FLOAT_VEC4 = 0x8B52;
enum GL_INT_VEC2 = 0x8B53;
enum GL_INT_VEC3 = 0x8B54;
enum GL_INT_VEC4 = 0x8B55;
enum GL_BOOL = 0x8B56;
enum GL_BOOL_VEC2 = 0x8B57;
enum GL_BOOL_VEC3 = 0x8B58;
enum GL_BOOL_VEC4 = 0x8B59;
enum GL_FLOAT_MAT2 = 0x8B5A;
enum GL_FLOAT_MAT3 = 0x8B5B;
enum GL_FLOAT_MAT4 = 0x8B5C;
enum GL_SAMPLER_1D = 0x8B5D;
enum GL_SAMPLER_2D = 0x8B5E;
enum GL_SAMPLER_3D = 0x8B5F;
enum GL_SAMPLER_CUBE = 0x8B60;
enum GL_SAMPLER_1D_SHADOW = 0x8B61;
enum GL_SAMPLER_2D_SHADOW = 0x8B62;
enum GL_DELETE_STATUS = 0x8B80;
enum GL_COMPILE_STATUS = 0x8B81;
enum GL_LINK_STATUS = 0x8B82;
enum GL_VALIDATE_STATUS = 0x8B83;
enum GL_INFO_LOG_LENGTH = 0x8B84;
enum GL_ATTACHED_SHADERS = 0x8B85;
enum GL_ACTIVE_UNIFORMS = 0x8B86;
enum GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
enum GL_SHADER_SOURCE_LENGTH = 0x8B88;
enum GL_ACTIVE_ATTRIBUTES = 0x8B89;
enum GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
enum GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
enum GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
enum GL_CURRENT_PROGRAM = 0x8B8D;
enum GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
enum GL_LOWER_LEFT = 0x8CA1;
enum GL_UPPER_LEFT = 0x8CA2;
enum GL_STENCIL_BACK_REF = 0x8CA3;
enum GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
enum GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
alias void function(GLenum modeRGB, GLenum modeAlpha) PFNGLBLENDEQUATIONSEPARATEPROC;
alias void function(GLsizei n, const(GLenum)* bufs) PFNGLDRAWBUFFERSPROC;
alias void function(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) PFNGLSTENCILOPSEPARATEPROC;
alias void function(GLenum face, GLenum func, GLint ref_, GLuint mask) PFNGLSTENCILFUNCSEPARATEPROC;
alias void function(GLenum face, GLuint mask) PFNGLSTENCILMASKSEPARATEPROC;
alias void function(GLuint program, GLuint shader) PFNGLATTACHSHADERPROC;
alias void function(GLuint program, GLuint index, const(GLchar)* name) PFNGLBINDATTRIBLOCATIONPROC;
alias void function(GLuint shader) PFNGLCOMPILESHADERPROC;
alias GLuint function() PFNGLCREATEPROGRAMPROC;
alias GLuint function(GLenum type) PFNGLCREATESHADERPROC;
alias void function(GLuint program) PFNGLDELETEPROGRAMPROC;
alias void function(GLuint shader) PFNGLDELETESHADERPROC;
alias void function(GLuint program, GLuint shader) PFNGLDETACHSHADERPROC;
alias void function(GLuint index) PFNGLDISABLEVERTEXATTRIBARRAYPROC;
alias void function(GLuint index) PFNGLENABLEVERTEXATTRIBARRAYPROC;
alias void function(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name) PFNGLGETACTIVEATTRIBPROC;
alias void function(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name) PFNGLGETACTIVEUNIFORMPROC;
alias void function(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders) PFNGLGETATTACHEDSHADERSPROC;
alias GLint function(GLuint program, const(GLchar)* name) PFNGLGETATTRIBLOCATIONPROC;
alias void function(GLuint program, GLenum pname, GLint* params) PFNGLGETPROGRAMIVPROC;
alias void function(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog) PFNGLGETPROGRAMINFOLOGPROC;
alias void function(GLuint shader, GLenum pname, GLint* params) PFNGLGETSHADERIVPROC;
alias void function(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog) PFNGLGETSHADERINFOLOGPROC;
alias void function(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source) PFNGLGETSHADERSOURCEPROC;
alias GLint function(GLuint program, const(GLchar)* name) PFNGLGETUNIFORMLOCATIONPROC;
alias void function(GLuint program, GLint location, GLfloat* params) PFNGLGETUNIFORMFVPROC;
alias void function(GLuint program, GLint location, GLint* params) PFNGLGETUNIFORMIVPROC;
alias void function(GLuint index, GLenum pname, GLdouble* params) PFNGLGETVERTEXATTRIBDVPROC;
alias void function(GLuint index, GLenum pname, GLfloat* params) PFNGLGETVERTEXATTRIBFVPROC;
alias void function(GLuint index, GLenum pname, GLint* params) PFNGLGETVERTEXATTRIBIVPROC;
alias void function(GLuint index, GLenum pname, GLvoid* *pointer) PFNGLGETVERTEXATTRIBPOINTERVPROC;
alias GLboolean function(GLuint program) PFNGLISPROGRAMPROC;
alias GLboolean function(GLuint shader) PFNGLISSHADERPROC;
alias void function(GLuint program) PFNGLLINKPROGRAMPROC;
alias void function(GLuint shader, GLsizei count, const(GLchar*)* string, const(GLint)* length) PFNGLSHADERSOURCEPROC;
alias void function(GLuint program) PFNGLUSEPROGRAMPROC;
alias void function(GLint location, GLfloat v0) PFNGLUNIFORM1FPROC;
alias void function(GLint location, GLfloat v0, GLfloat v1) PFNGLUNIFORM2FPROC;
alias void function(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) PFNGLUNIFORM3FPROC;
alias void function(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) PFNGLUNIFORM4FPROC;
alias void function(GLint location, GLint v0) PFNGLUNIFORM1IPROC;
alias void function(GLint location, GLint v0, GLint v1) PFNGLUNIFORM2IPROC;
alias void function(GLint location, GLint v0, GLint v1, GLint v2) PFNGLUNIFORM3IPROC;
alias void function(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) PFNGLUNIFORM4IPROC;
alias void function(GLint location, GLsizei count, const(GLfloat)* value) PFNGLUNIFORM1FVPROC;
alias void function(GLint location, GLsizei count, const(GLfloat)* value) PFNGLUNIFORM2FVPROC;
alias void function(GLint location, GLsizei count, const(GLfloat)* value) PFNGLUNIFORM3FVPROC;
alias void function(GLint location, GLsizei count, const(GLfloat)* value) PFNGLUNIFORM4FVPROC;
alias void function(GLint location, GLsizei count, const(GLint)* value) PFNGLUNIFORM1IVPROC;
alias void function(GLint location, GLsizei count, const(GLint)* value) PFNGLUNIFORM2IVPROC;
alias void function(GLint location, GLsizei count, const(GLint)* value) PFNGLUNIFORM3IVPROC;
alias void function(GLint location, GLsizei count, const(GLint)* value) PFNGLUNIFORM4IVPROC;
alias void function(GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) PFNGLUNIFORMMATRIX2FVPROC;
alias void function(GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) PFNGLUNIFORMMATRIX3FVPROC;
alias void function(GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) PFNGLUNIFORMMATRIX4FVPROC;
alias void function(GLuint program) PFNGLVALIDATEPROGRAMPROC;
alias void function(GLuint index, GLdouble x) PFNGLVERTEXATTRIB1DPROC;
alias void function(GLuint index, const(GLdouble)* v) PFNGLVERTEXATTRIB1DVPROC;
alias void function(GLuint index, GLfloat x) PFNGLVERTEXATTRIB1FPROC;
alias void function(GLuint index, const(GLfloat)* v) PFNGLVERTEXATTRIB1FVPROC;
alias void function(GLuint index, GLshort x) PFNGLVERTEXATTRIB1SPROC;
alias void function(GLuint index, const(GLshort)* v) PFNGLVERTEXATTRIB1SVPROC;
alias void function(GLuint index, GLdouble x, GLdouble y) PFNGLVERTEXATTRIB2DPROC;
alias void function(GLuint index, const(GLdouble)* v) PFNGLVERTEXATTRIB2DVPROC;
alias void function(GLuint index, GLfloat x, GLfloat y) PFNGLVERTEXATTRIB2FPROC;
alias void function(GLuint index, const(GLfloat)* v) PFNGLVERTEXATTRIB2FVPROC;
alias void function(GLuint index, GLshort x, GLshort y) PFNGLVERTEXATTRIB2SPROC;
alias void function(GLuint index, const(GLshort)* v) PFNGLVERTEXATTRIB2SVPROC;
alias void function(GLuint index, GLdouble x, GLdouble y, GLdouble z) PFNGLVERTEXATTRIB3DPROC;
alias void function(GLuint index, const(GLdouble)* v) PFNGLVERTEXATTRIB3DVPROC;
alias void function(GLuint index, GLfloat x, GLfloat y, GLfloat z) PFNGLVERTEXATTRIB3FPROC;
alias void function(GLuint index, const(GLfloat)* v) PFNGLVERTEXATTRIB3FVPROC;
alias void function(GLuint index, GLshort x, GLshort y, GLshort z) PFNGLVERTEXATTRIB3SPROC;
alias void function(GLuint index, const(GLshort)* v) PFNGLVERTEXATTRIB3SVPROC;
alias void function(GLuint index, const(GLbyte)* v) PFNGLVERTEXATTRIB4NBVPROC;
alias void function(GLuint index, const(GLint)* v) PFNGLVERTEXATTRIB4NIVPROC;
alias void function(GLuint index, const(GLshort)* v) PFNGLVERTEXATTRIB4NSVPROC;
alias void function(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) PFNGLVERTEXATTRIB4NUBPROC;
alias void function(GLuint index, const(GLubyte)* v) PFNGLVERTEXATTRIB4NUBVPROC;
alias void function(GLuint index, const(GLuint)* v) PFNGLVERTEXATTRIB4NUIVPROC;
alias void function(GLuint index, const(GLushort)* v) PFNGLVERTEXATTRIB4NUSVPROC;
alias void function(GLuint index, const(GLbyte)* v) PFNGLVERTEXATTRIB4BVPROC;
alias void function(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) PFNGLVERTEXATTRIB4DPROC;
alias void function(GLuint index, const(GLdouble)* v) PFNGLVERTEXATTRIB4DVPROC;
alias void function(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) PFNGLVERTEXATTRIB4FPROC;
alias void function(GLuint index, const(GLfloat)* v) PFNGLVERTEXATTRIB4FVPROC;
alias void function(GLuint index, const(GLint)* v) PFNGLVERTEXATTRIB4IVPROC;
alias void function(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) PFNGLVERTEXATTRIB4SPROC;
alias void function(GLuint index, const(GLshort)* v) PFNGLVERTEXATTRIB4SVPROC;
alias void function(GLuint index, const(GLubyte)* v) PFNGLVERTEXATTRIB4UBVPROC;
alias void function(GLuint index, const(GLuint)* v) PFNGLVERTEXATTRIB4UIVPROC;
alias void function(GLuint index, const(GLushort)* v) PFNGLVERTEXATTRIB4USVPROC;
alias void function(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const(GLvoid)* pointer) PFNGLVERTEXATTRIBPOINTERPROC;
PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
PFNGLDRAWBUFFERSPROC glDrawBuffers;
PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
PFNGLATTACHSHADERPROC glAttachShader;
PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
PFNGLCOMPILESHADERPROC glCompileShader;
PFNGLCREATEPROGRAMPROC glCreateProgram;
PFNGLCREATESHADERPROC glCreateShader;
PFNGLDELETEPROGRAMPROC glDeleteProgram;
PFNGLDELETESHADERPROC glDeleteShader;
PFNGLDETACHSHADERPROC glDetachShader;
PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
PFNGLGETPROGRAMIVPROC glGetProgramiv;
PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
PFNGLGETSHADERIVPROC glGetShaderiv;
PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
PFNGLGETSHADERSOURCEPROC glGetShaderSource;
PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
PFNGLGETUNIFORMFVPROC glGetUniformfv;
PFNGLGETUNIFORMIVPROC glGetUniformiv;
PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
PFNGLISPROGRAMPROC glIsProgram;
PFNGLISSHADERPROC glIsShader;
PFNGLLINKPROGRAMPROC glLinkProgram;
PFNGLSHADERSOURCEPROC glShaderSource;
PFNGLUSEPROGRAMPROC glUseProgram;
PFNGLUNIFORM1FPROC glUniform1f;
PFNGLUNIFORM2FPROC glUniform2f;
PFNGLUNIFORM3FPROC glUniform3f;
PFNGLUNIFORM4FPROC glUniform4f;
PFNGLUNIFORM1IPROC glUniform1i;
PFNGLUNIFORM2IPROC glUniform2i;
PFNGLUNIFORM3IPROC glUniform3i;
PFNGLUNIFORM4IPROC glUniform4i;
PFNGLUNIFORM1FVPROC glUniform1fv;
PFNGLUNIFORM2FVPROC glUniform2fv;
PFNGLUNIFORM3FVPROC glUniform3fv;
PFNGLUNIFORM4FVPROC glUniform4fv;
PFNGLUNIFORM1IVPROC glUniform1iv;
PFNGLUNIFORM2IVPROC glUniform2iv;
PFNGLUNIFORM3IVPROC glUniform3iv;
PFNGLUNIFORM4IVPROC glUniform4iv;
PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
PFNGLVALIDATEPROGRAMPROC glValidateProgram;
PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;

/*
// GL_VERSION_2_1
enum GL_PIXEL_PACK_BUFFER = 0x88EB;
enum GL_PIXEL_UNPACK_BUFFER = 0x88EC;
enum GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
enum GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
enum GL_FLOAT_MAT2x3 = 0x8B65;
enum GL_FLOAT_MAT2x4 = 0x8B66;
enum GL_FLOAT_MAT3x2 = 0x8B67;
enum GL_FLOAT_MAT3x4 = 0x8B68;
enum GL_FLOAT_MAT4x2 = 0x8B69;
enum GL_FLOAT_MAT4x3 = 0x8B6A;
enum GL_SRGB = 0x8C40;
enum GL_SRGB8 = 0x8C41;
enum GL_SRGB_ALPHA = 0x8C42;
enum GL_SRGB8_ALPHA8 = 0x8C43;
enum GL_COMPRESSED_SRGB = 0x8C48;
enum GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
alias void function(GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) PFNGLUNIFORMMATRIX2X3FVPROC;
alias void function(GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) PFNGLUNIFORMMATRIX3X2FVPROC;
alias void function(GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) PFNGLUNIFORMMATRIX2X4FVPROC;
alias void function(GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) PFNGLUNIFORMMATRIX4X2FVPROC;
alias void function(GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) PFNGLUNIFORMMATRIX3X4FVPROC;
alias void function(GLint location, GLsizei count, GLboolean transpose, const(GLfloat)* value) PFNGLUNIFORMMATRIX4X3FVPROC;
PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;

// GL_VERSION_3_0
alias ushort GLhalf;
enum GL_COMPARE_REF_TO_TEXTURE = 0x884E;
enum GL_CLIP_DISTANCE0 = 0x3000;
enum GL_CLIP_DISTANCE1 = 0x3001;
enum GL_CLIP_DISTANCE2 = 0x3002;
enum GL_CLIP_DISTANCE3 = 0x3003;
enum GL_CLIP_DISTANCE4 = 0x3004;
enum GL_CLIP_DISTANCE5 = 0x3005;
enum GL_CLIP_DISTANCE6 = 0x3006;
enum GL_CLIP_DISTANCE7 = 0x3007;
enum GL_MAX_CLIP_DISTANCES = 0x0D32;
enum GL_MAJOR_VERSION = 0x821B;
enum GL_MINOR_VERSION = 0x821C;
enum GL_NUM_EXTENSIONS = 0x821D;
enum GL_CONTEXT_FLAGS = 0x821E;
enum GL_COMPRESSED_RED = 0x8225;
enum GL_COMPRESSED_RG = 0x8226;
enum GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
enum GL_RGBA32F = 0x8814;
enum GL_RGB32F = 0x8815;
enum GL_RGBA16F = 0x881A;
enum GL_RGB16F = 0x881B;
enum GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
enum GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
enum GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
enum GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
enum GL_CLAMP_READ_COLOR = 0x891C;
enum GL_FIXED_ONLY = 0x891D;
enum GL_MAX_VARYING_COMPONENTS = 0x8B4B;
enum GL_TEXTURE_1D_ARRAY = 0x8C18;
enum GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
enum GL_TEXTURE_2D_ARRAY = 0x8C1A;
enum GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
enum GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
enum GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
enum GL_R11F_G11F_B10F = 0x8C3A;
enum GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
enum GL_RGB9_E5 = 0x8C3D;
enum GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
enum GL_TEXTURE_SHARED_SIZE = 0x8C3F;
enum GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
enum GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
enum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
enum GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
enum GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
enum GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
enum GL_PRIMITIVES_GENERATED = 0x8C87;
enum GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
enum GL_RASTERIZER_DISCARD = 0x8C89;
enum GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
enum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
enum GL_INTERLEAVED_ATTRIBS = 0x8C8C;
enum GL_SEPARATE_ATTRIBS = 0x8C8D;
enum GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
enum GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
enum GL_RGBA32UI = 0x8D70;
enum GL_RGB32UI = 0x8D71;
enum GL_RGBA16UI = 0x8D76;
enum GL_RGB16UI = 0x8D77;
enum GL_RGBA8UI = 0x8D7C;
enum GL_RGB8UI = 0x8D7D;
enum GL_RGBA32I = 0x8D82;
enum GL_RGB32I = 0x8D83;
enum GL_RGBA16I = 0x8D88;
enum GL_RGB16I = 0x8D89;
enum GL_RGBA8I = 0x8D8E;
enum GL_RGB8I = 0x8D8F;
enum GL_RED_INTEGER = 0x8D94;
enum GL_GREEN_INTEGER = 0x8D95;
enum GL_BLUE_INTEGER = 0x8D96;
enum GL_RGB_INTEGER = 0x8D98;
enum GL_RGBA_INTEGER = 0x8D99;
enum GL_BGR_INTEGER = 0x8D9A;
enum GL_BGRA_INTEGER = 0x8D9B;
enum GL_SAMPLER_1D_ARRAY = 0x8DC0;
enum GL_SAMPLER_2D_ARRAY = 0x8DC1;
enum GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
enum GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
enum GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
enum GL_UNSIGNED_INT_VEC2 = 0x8DC6;
enum GL_UNSIGNED_INT_VEC3 = 0x8DC7;
enum GL_UNSIGNED_INT_VEC4 = 0x8DC8;
enum GL_INT_SAMPLER_1D = 0x8DC9;
enum GL_INT_SAMPLER_2D = 0x8DCA;
enum GL_INT_SAMPLER_3D = 0x8DCB;
enum GL_INT_SAMPLER_CUBE = 0x8DCC;
enum GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
enum GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
enum GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
enum GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
enum GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
enum GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
enum GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
enum GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
enum GL_QUERY_WAIT = 0x8E13;
enum GL_QUERY_NO_WAIT = 0x8E14;
enum GL_QUERY_BY_REGION_WAIT = 0x8E15;
enum GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
enum GL_BUFFER_ACCESS_FLAGS = 0x911F;
enum GL_BUFFER_MAP_LENGTH = 0x9120;
enum GL_BUFFER_MAP_OFFSET = 0x9121;
enum GL_DEPTH_COMPONENT32F = 0x8CAC;
enum GL_DEPTH32F_STENCIL8 = 0x8CAD;
enum GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
enum GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
enum GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
enum GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
enum GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
enum GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
enum GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
enum GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
enum GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
enum GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
enum GL_FRAMEBUFFER_DEFAULT = 0x8218;
enum GL_FRAMEBUFFER_UNDEFINED = 0x8219;
enum GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
enum GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
enum GL_DEPTH_STENCIL = 0x84F9;
enum GL_UNSIGNED_INT_24_8 = 0x84FA;
enum GL_DEPTH24_STENCIL8 = 0x88F0;
enum GL_TEXTURE_STENCIL_SIZE = 0x88F1;
enum GL_TEXTURE_RED_TYPE = 0x8C10;
enum GL_TEXTURE_GREEN_TYPE = 0x8C11;
enum GL_TEXTURE_BLUE_TYPE = 0x8C12;
enum GL_TEXTURE_ALPHA_TYPE = 0x8C13;
enum GL_TEXTURE_DEPTH_TYPE = 0x8C16;
enum GL_UNSIGNED_NORMALIZED = 0x8C17;
enum GL_FRAMEBUFFER_BINDING = 0x8CA6;
enum GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
enum GL_RENDERBUFFER_BINDING = 0x8CA7;
enum GL_READ_FRAMEBUFFER = 0x8CA8;
enum GL_DRAW_FRAMEBUFFER = 0x8CA9;
enum GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
enum GL_RENDERBUFFER_SAMPLES = 0x8CAB;
enum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
enum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
enum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
enum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
enum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
enum GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
enum GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
enum GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
enum GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
enum GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
enum GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
enum GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
enum GL_COLOR_ATTACHMENT0 = 0x8CE0;
enum GL_COLOR_ATTACHMENT1 = 0x8CE1;
enum GL_COLOR_ATTACHMENT2 = 0x8CE2;
enum GL_COLOR_ATTACHMENT3 = 0x8CE3;
enum GL_COLOR_ATTACHMENT4 = 0x8CE4;
enum GL_COLOR_ATTACHMENT5 = 0x8CE5;
enum GL_COLOR_ATTACHMENT6 = 0x8CE6;
enum GL_COLOR_ATTACHMENT7 = 0x8CE7;
enum GL_COLOR_ATTACHMENT8 = 0x8CE8;
enum GL_COLOR_ATTACHMENT9 = 0x8CE9;
enum GL_COLOR_ATTACHMENT10 = 0x8CEA;
enum GL_COLOR_ATTACHMENT11 = 0x8CEB;
enum GL_COLOR_ATTACHMENT12 = 0x8CEC;
enum GL_COLOR_ATTACHMENT13 = 0x8CED;
enum GL_COLOR_ATTACHMENT14 = 0x8CEE;
enum GL_COLOR_ATTACHMENT15 = 0x8CEF;
enum GL_DEPTH_ATTACHMENT = 0x8D00;
enum GL_STENCIL_ATTACHMENT = 0x8D20;
enum GL_FRAMEBUFFER = 0x8D40;
enum GL_RENDERBUFFER = 0x8D41;
enum GL_RENDERBUFFER_WIDTH = 0x8D42;
enum GL_RENDERBUFFER_HEIGHT = 0x8D43;
enum GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
enum GL_STENCIL_INDEX1 = 0x8D46;
enum GL_STENCIL_INDEX4 = 0x8D47;
enum GL_STENCIL_INDEX8 = 0x8D48;
enum GL_STENCIL_INDEX16 = 0x8D49;
enum GL_RENDERBUFFER_RED_SIZE = 0x8D50;
enum GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
enum GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
enum GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
enum GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
enum GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
enum GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
enum GL_MAX_SAMPLES = 0x8D57;
enum GL_FRAMEBUFFER_SRGB = 0x8DB9;
enum GL_HALF_FLOAT = 0x140B;
enum GL_MAP_READ_BIT = 0x0001;
enum GL_MAP_WRITE_BIT = 0x0002;
enum GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
enum GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
enum GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
enum GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
enum GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
enum GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
enum GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
enum GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
enum GL_RG = 0x8227;
enum GL_RG_INTEGER = 0x8228;
enum GL_R8 = 0x8229;
enum GL_R16 = 0x822A;
enum GL_RG8 = 0x822B;
enum GL_RG16 = 0x822C;
enum GL_R16F = 0x822D;
enum GL_R32F = 0x822E;
enum GL_RG16F = 0x822F;
enum GL_RG32F = 0x8230;
enum GL_R8I = 0x8231;
enum GL_R8UI = 0x8232;
enum GL_R16I = 0x8233;
enum GL_R16UI = 0x8234;
enum GL_R32I = 0x8235;
enum GL_R32UI = 0x8236;
enum GL_RG8I = 0x8237;
enum GL_RG8UI = 0x8238;
enum GL_RG16I = 0x8239;
enum GL_RG16UI = 0x823A;
enum GL_RG32I = 0x823B;
enum GL_RG32UI = 0x823C;
enum GL_VERTEX_ARRAY_BINDING = 0x85B5;
alias void function(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) PFNGLCOLORMASKIPROC;
alias void function(GLenum target, GLuint index, GLboolean* data) PFNGLGETBOOLEANI_VPROC;
alias void function(GLenum target, GLuint index, GLint* data) PFNGLGETINTEGERI_VPROC;
alias void function(GLenum target, GLuint index) PFNGLENABLEIPROC;
alias void function(GLenum target, GLuint index) PFNGLDISABLEIPROC;
alias GLboolean function(GLenum target, GLuint index) PFNGLISENABLEDIPROC;
alias void function(GLenum primitiveMode) PFNGLBEGINTRANSFORMFEEDBACKPROC;
alias void function() PFNGLENDTRANSFORMFEEDBACKPROC;
alias void function(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) PFNGLBINDBUFFERRANGEPROC;
alias void function(GLenum target, GLuint index, GLuint buffer) PFNGLBINDBUFFERBASEPROC;
alias void function(GLuint program, GLsizei count, const(GLchar*)* varyings, GLenum bufferMode) PFNGLTRANSFORMFEEDBACKVARYINGSPROC;
alias void function(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name) PFNGLGETTRANSFORMFEEDBACKVARYINGPROC;
alias void function(GLenum target, GLenum clamp) PFNGLCLAMPCOLORPROC;
alias void function(GLuint id, GLenum mode) PFNGLBEGINCONDITIONALRENDERPROC;
alias void function() PFNGLENDCONDITIONALRENDERPROC;
alias void function(GLuint index, GLint size, GLenum type, GLsizei stride, const(GLvoid)* pointer) PFNGLVERTEXATTRIBIPOINTERPROC;
alias void function(GLuint index, GLenum pname, GLint* params) PFNGLGETVERTEXATTRIBIIVPROC;
alias void function(GLuint index, GLenum pname, GLuint* params) PFNGLGETVERTEXATTRIBIUIVPROC;
alias void function(GLuint index, GLint x) PFNGLVERTEXATTRIBI1IPROC;
alias void function(GLuint index, GLint x, GLint y) PFNGLVERTEXATTRIBI2IPROC;
alias void function(GLuint index, GLint x, GLint y, GLint z) PFNGLVERTEXATTRIBI3IPROC;
alias void function(GLuint index, GLint x, GLint y, GLint z, GLint w) PFNGLVERTEXATTRIBI4IPROC;
alias void function(GLuint index, GLuint x) PFNGLVERTEXATTRIBI1UIPROC;
alias void function(GLuint index, GLuint x, GLuint y) PFNGLVERTEXATTRIBI2UIPROC;
alias void function(GLuint index, GLuint x, GLuint y, GLuint z) PFNGLVERTEXATTRIBI3UIPROC;
alias void function(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) PFNGLVERTEXATTRIBI4UIPROC;
alias void function(GLuint index, const(GLint)* v) PFNGLVERTEXATTRIBI1IVPROC;
alias void function(GLuint index, const(GLint)* v) PFNGLVERTEXATTRIBI2IVPROC;
alias void function(GLuint index, const(GLint)* v) PFNGLVERTEXATTRIBI3IVPROC;
alias void function(GLuint index, const(GLint)* v) PFNGLVERTEXATTRIBI4IVPROC;
alias void function(GLuint index, const(GLuint)* v) PFNGLVERTEXATTRIBI1UIVPROC;
alias void function(GLuint index, const(GLuint)* v) PFNGLVERTEXATTRIBI2UIVPROC;
alias void function(GLuint index, const(GLuint)* v) PFNGLVERTEXATTRIBI3UIVPROC;
alias void function(GLuint index, const(GLuint)* v) PFNGLVERTEXATTRIBI4UIVPROC;
alias void function(GLuint index, const(GLbyte)* v) PFNGLVERTEXATTRIBI4BVPROC;
alias void function(GLuint index, const(GLshort)* v) PFNGLVERTEXATTRIBI4SVPROC;
alias void function(GLuint index, const(GLubyte)* v) PFNGLVERTEXATTRIBI4UBVPROC;
alias void function(GLuint index, const(GLushort)* v) PFNGLVERTEXATTRIBI4USVPROC;
alias void function(GLuint program, GLint location, GLuint* params) PFNGLGETUNIFORMUIVPROC;
alias void function(GLuint program, GLuint color, const(GLchar)* name) PFNGLBINDFRAGDATALOCATIONPROC;
alias GLint function(GLuint program, const(GLchar)* name) PFNGLGETFRAGDATALOCATIONPROC;
alias void function(GLint location, GLuint v0) PFNGLUNIFORM1UIPROC;
alias void function(GLint location, GLuint v0, GLuint v1) PFNGLUNIFORM2UIPROC;
alias void function(GLint location, GLuint v0, GLuint v1, GLuint v2) PFNGLUNIFORM3UIPROC;
alias void function(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) PFNGLUNIFORM4UIPROC;
alias void function(GLint location, GLsizei count, const(GLuint)* value) PFNGLUNIFORM1UIVPROC;
alias void function(GLint location, GLsizei count, const(GLuint)* value) PFNGLUNIFORM2UIVPROC;
alias void function(GLint location, GLsizei count, const(GLuint)* value) PFNGLUNIFORM3UIVPROC;
alias void function(GLint location, GLsizei count, const(GLuint)* value) PFNGLUNIFORM4UIVPROC;
alias void function(GLenum target, GLenum pname, const(GLint)* params) PFNGLTEXPARAMETERIIVPROC;
alias void function(GLenum target, GLenum pname, const(GLuint)* params) PFNGLTEXPARAMETERIUIVPROC;
alias void function(GLenum target, GLenum pname, GLint* params) PFNGLGETTEXPARAMETERIIVPROC;
alias void function(GLenum target, GLenum pname, GLuint* params) PFNGLGETTEXPARAMETERIUIVPROC;
alias void function(GLenum buffer, GLint drawbuffer, const(GLint)* value) PFNGLCLEARBUFFERIVPROC;
alias void function(GLenum buffer, GLint drawbuffer, const(GLuint)* value) PFNGLCLEARBUFFERUIVPROC;
alias void function(GLenum buffer, GLint drawbuffer, const(GLfloat)* value) PFNGLCLEARBUFFERFVPROC;
alias void function(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) PFNGLCLEARBUFFERFIPROC;
alias const(GLubyte)* function(GLenum name, GLuint index) PFNGLGETSTRINGIPROC;
alias GLboolean function(GLuint renderbuffer) PFNGLISRENDERBUFFERPROC;
alias void function(GLenum target, GLuint renderbuffer) PFNGLBINDRENDERBUFFERPROC;
alias void function(GLsizei n, const(GLuint)* renderbuffers) PFNGLDELETERENDERBUFFERSPROC;
alias void function(GLsizei n, GLuint* renderbuffers) PFNGLGENRENDERBUFFERSPROC;
alias void function(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) PFNGLRENDERBUFFERSTORAGEPROC;
alias void function(GLenum target, GLenum pname, GLint* params) PFNGLGETRENDERBUFFERPARAMETERIVPROC;
alias GLboolean function(GLuint framebuffer) PFNGLISFRAMEBUFFERPROC;
alias void function(GLenum target, GLuint framebuffer) PFNGLBINDFRAMEBUFFERPROC;
alias void function(GLsizei n, const(GLuint)* framebuffers) PFNGLDELETEFRAMEBUFFERSPROC;
alias void function(GLsizei n, GLuint* framebuffers) PFNGLGENFRAMEBUFFERSPROC;
alias GLenum function(GLenum target) PFNGLCHECKFRAMEBUFFERSTATUSPROC;
alias void function(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) PFNGLFRAMEBUFFERTEXTURE1DPROC;
alias void function(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) PFNGLFRAMEBUFFERTEXTURE2DPROC;
alias void function(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) PFNGLFRAMEBUFFERTEXTURE3DPROC;
alias void function(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) PFNGLFRAMEBUFFERRENDERBUFFERPROC;
alias void function(GLenum target, GLenum attachment, GLenum pname, GLint* params) PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC;
alias void function(GLenum target) PFNGLGENERATEMIPMAPPROC;
alias void function(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) PFNGLBLITFRAMEBUFFERPROC;
alias void function(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC;
alias void function(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) PFNGLFRAMEBUFFERTEXTURELAYERPROC;
alias void *function(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) PFNGLMAPBUFFERRANGEPROC;
alias void function(GLenum target, GLintptr offset, GLsizeiptr length) PFNGLFLUSHMAPPEDBUFFERRANGEPROC;
alias void function(GLuint array) PFNGLBINDVERTEXARRAYPROC;
alias void function(GLsizei n, const(GLuint)* arrays) PFNGLDELETEVERTEXARRAYSPROC;
alias void function(GLsizei n, GLuint* arrays) PFNGLGENVERTEXARRAYSPROC;
alias GLboolean function(GLuint array) PFNGLISVERTEXARRAYPROC;
PFNGLCOLORMASKIPROC glColorMaski;
PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
PFNGLENABLEIPROC glEnablei;
PFNGLDISABLEIPROC glDisablei;
PFNGLISENABLEDIPROC glIsEnabledi;
PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
PFNGLBINDBUFFERBASEPROC glBindBufferBase;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
PFNGLCLAMPCOLORPROC glClampColor;
PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
PFNGLUNIFORM1UIPROC glUniform1ui;
PFNGLUNIFORM2UIPROC glUniform2ui;
PFNGLUNIFORM3UIPROC glUniform3ui;
PFNGLUNIFORM4UIPROC glUniform4ui;
PFNGLUNIFORM1UIVPROC glUniform1uiv;
PFNGLUNIFORM2UIVPROC glUniform2uiv;
PFNGLUNIFORM3UIVPROC glUniform3uiv;
PFNGLUNIFORM4UIVPROC glUniform4uiv;
PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
PFNGLCLEARBUFFERIVPROC glClearBufferiv;
PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
PFNGLCLEARBUFFERFVPROC glClearBufferfv;
PFNGLCLEARBUFFERFIPROC glClearBufferfi;
PFNGLGETSTRINGIPROC glGetStringi;
PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
void *glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
PFNGLISVERTEXARRAYPROC glIsVertexArray;

// GL_VERSION_3_1
enum GL_SAMPLER_2D_RECT = 0x8B63;
enum GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
enum GL_SAMPLER_BUFFER = 0x8DC2;
enum GL_INT_SAMPLER_2D_RECT = 0x8DCD;
enum GL_INT_SAMPLER_BUFFER = 0x8DD0;
enum GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
enum GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
enum GL_TEXTURE_BUFFER = 0x8C2A;
enum GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
enum GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
enum GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
enum GL_TEXTURE_RECTANGLE = 0x84F5;
enum GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
enum GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
enum GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
enum GL_R8_SNORM = 0x8F94;
enum GL_RG8_SNORM = 0x8F95;
enum GL_RGB8_SNORM = 0x8F96;
enum GL_RGBA8_SNORM = 0x8F97;
enum GL_R16_SNORM = 0x8F98;
enum GL_RG16_SNORM = 0x8F99;
enum GL_RGB16_SNORM = 0x8F9A;
enum GL_RGBA16_SNORM = 0x8F9B;
enum GL_SIGNED_NORMALIZED = 0x8F9C;
enum GL_PRIMITIVE_RESTART = 0x8F9D;
enum GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
enum GL_COPY_READ_BUFFER = 0x8F36;
enum GL_COPY_WRITE_BUFFER = 0x8F37;
enum GL_UNIFORM_BUFFER = 0x8A11;
enum GL_UNIFORM_BUFFER_BINDING = 0x8A28;
enum GL_UNIFORM_BUFFER_START = 0x8A29;
enum GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
enum GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
enum GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
enum GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
enum GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
enum GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
enum GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
enum GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
enum GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
enum GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
enum GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
enum GL_UNIFORM_TYPE = 0x8A37;
enum GL_UNIFORM_SIZE = 0x8A38;
enum GL_UNIFORM_NAME_LENGTH = 0x8A39;
enum GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
enum GL_UNIFORM_OFFSET = 0x8A3B;
enum GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
enum GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
enum GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
enum GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
enum GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
enum GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
enum GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
enum GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
enum GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
enum GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
enum GL_INVALID_INDEX = 0xFFFFFFFFu;
alias void function(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) PFNGLDRAWARRAYSINSTANCEDPROC;
alias void function(GLenum mode, GLsizei count, GLenum type, const(GLvoid)* indices, GLsizei instancecount) PFNGLDRAWELEMENTSINSTANCEDPROC;
alias void function(GLenum target, GLenum internalformat, GLuint buffer) PFNGLTEXBUFFERPROC;
alias void function(GLuint index) PFNGLPRIMITIVERESTARTINDEXPROC;
alias void function(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) PFNGLCOPYBUFFERSUBDATAPROC;
alias void function(GLuint program, GLsizei uniformCount, const(GLchar*)* uniformNames, GLuint* uniformIndices) PFNGLGETUNIFORMINDICESPROC;
alias void function(GLuint program, GLsizei uniformCount, const(GLuint)* uniformIndices, GLenum pname, GLint* params) PFNGLGETACTIVEUNIFORMSIVPROC;
alias void function(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName) PFNGLGETACTIVEUNIFORMNAMEPROC;
alias GLuint function(GLuint program, const(GLchar)* uniformBlockName) PFNGLGETUNIFORMBLOCKINDEXPROC;
alias void function(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params) PFNGLGETACTIVEUNIFORMBLOCKIVPROC;
alias void function(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName) PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC;
alias void function(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) PFNGLUNIFORMBLOCKBINDINGPROC;
PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
PFNGLTEXBUFFERPROC glTexBuffer;
PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;

// GL_VERSION_3_2
struct __GLsync;
alias __GLsync* GLsync;
import core.stdc.inttypes;
alias uint64_t GLuint64;
alias int64_t GLint64;
enum GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
enum GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
enum GL_LINES_ADJACENCY = 0x000A;
enum GL_LINE_STRIP_ADJACENCY = 0x000B;
enum GL_TRIANGLES_ADJACENCY = 0x000C;
enum GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
enum GL_PROGRAM_POINT_SIZE = 0x8642;
enum GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
enum GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
enum GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
enum GL_GEOMETRY_SHADER = 0x8DD9;
enum GL_GEOMETRY_VERTICES_OUT = 0x8916;
enum GL_GEOMETRY_INPUT_TYPE = 0x8917;
enum GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
enum GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
enum GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
enum GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
enum GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
enum GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
enum GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
enum GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
enum GL_CONTEXT_PROFILE_MASK = 0x9126;
enum GL_DEPTH_CLAMP = 0x864F;
enum GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
enum GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
enum GL_LAST_VERTEX_CONVENTION = 0x8E4E;
enum GL_PROVOKING_VERTEX = 0x8E4F;
enum GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
enum GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
enum GL_OBJECT_TYPE = 0x9112;
enum GL_SYNC_CONDITION = 0x9113;
enum GL_SYNC_STATUS = 0x9114;
enum GL_SYNC_FLAGS = 0x9115;
enum GL_SYNC_FENCE = 0x9116;
enum GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
enum GL_UNSIGNALED = 0x9118;
enum GL_SIGNALED = 0x9119;
enum GL_ALREADY_SIGNALED = 0x911A;
enum GL_TIMEOUT_EXPIRED = 0x911B;
enum GL_CONDITION_SATISFIED = 0x911C;
enum GL_WAIT_FAILED = 0x911D;
enum GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFUL;
enum GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
enum GL_SAMPLE_POSITION = 0x8E50;
enum GL_SAMPLE_MASK = 0x8E51;
enum GL_SAMPLE_MASK_VALUE = 0x8E52;
enum GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
enum GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
enum GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
enum GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
enum GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
enum GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
enum GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
enum GL_TEXTURE_SAMPLES = 0x9106;
enum GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
enum GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
enum GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
enum GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
enum GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
enum GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
enum GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
enum GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
enum GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
enum GL_MAX_INTEGER_SAMPLES = 0x9110;
alias void function(GLenum mode, GLsizei count, GLenum type, const(GLvoid)* indices, GLint basevertex) PFNGLDRAWELEMENTSBASEVERTEXPROC;
alias void function(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const(GLvoid)* indices, GLint basevertex) PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC;
alias void function(GLenum mode, GLsizei count, GLenum type, const(GLvoid)* indices, GLsizei instancecount, GLint basevertex) PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC;
alias void function(GLenum mode, const(GLsizei)* count, GLenum type, const(GLvoid*)* indices, GLsizei drawcount, const(GLint)* basevertex) PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC;
alias void function(GLenum mode) PFNGLPROVOKINGVERTEXPROC;
alias GLsync function(GLenum condition, GLbitfield flags) PFNGLFENCESYNCPROC;
alias GLboolean function(GLsync sync) PFNGLISSYNCPROC;
alias void function(GLsync sync) PFNGLDELETESYNCPROC;
alias GLenum function(GLsync sync, GLbitfield flags, GLuint64 timeout) PFNGLCLIENTWAITSYNCPROC;
alias void function(GLsync sync, GLbitfield flags, GLuint64 timeout) PFNGLWAITSYNCPROC;
alias void function(GLenum pname, GLint64* params) PFNGLGETINTEGER64VPROC;
alias void function(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values) PFNGLGETSYNCIVPROC;
alias void function(GLenum target, GLuint index, GLint64* data) PFNGLGETINTEGER64I_VPROC;
alias void function(GLenum target, GLenum pname, GLint64* params) PFNGLGETBUFFERPARAMETERI64VPROC;
alias void function(GLenum target, GLenum attachment, GLuint texture, GLint level) PFNGLFRAMEBUFFERTEXTUREPROC;
alias void function(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) PFNGLTEXIMAGE2DMULTISAMPLEPROC;
alias void function(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) PFNGLTEXIMAGE3DMULTISAMPLEPROC;
alias void function(GLenum pname, GLuint index, GLfloat* val) PFNGLGETMULTISAMPLEFVPROC;
alias void function(GLuint index, GLbitfield mask) PFNGLSAMPLEMASKIPROC;
PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
PFNGLFENCESYNCPROC glFenceSync;
PFNGLISSYNCPROC glIsSync;
PFNGLDELETESYNCPROC glDeleteSync;
PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
PFNGLWAITSYNCPROC glWaitSync;
PFNGLGETINTEGER64VPROC glGetInteger64v;
PFNGLGETSYNCIVPROC glGetSynciv;
PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
PFNGLSAMPLEMASKIPROC glSampleMaski;

// GL_VERSION_3_3
enum GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
enum GL_SRC1_COLOR = 0x88F9;
enum GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
enum GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
enum GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
enum GL_ANY_SAMPLES_PASSED = 0x8C2F;
enum GL_SAMPLER_BINDING = 0x8919;
enum GL_RGB10_A2UI = 0x906F;
enum GL_TEXTURE_SWIZZLE_R = 0x8E42;
enum GL_TEXTURE_SWIZZLE_G = 0x8E43;
enum GL_TEXTURE_SWIZZLE_B = 0x8E44;
enum GL_TEXTURE_SWIZZLE_A = 0x8E45;
enum GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
enum GL_TIME_ELAPSED = 0x88BF;
enum GL_TIMESTAMP = 0x8E28;
enum GL_INT_2_10_10_10_REV = 0x8D9F;
alias void function(GLuint program, GLuint colorNumber, GLuint index, const(GLchar)* name) PFNGLBINDFRAGDATALOCATIONINDEXEDPROC;
alias GLint function(GLuint program, const(GLchar)* name) PFNGLGETFRAGDATAINDEXPROC;
alias void function(GLsizei count, GLuint* samplers) PFNGLGENSAMPLERSPROC;
alias void function(GLsizei count, const(GLuint)* samplers) PFNGLDELETESAMPLERSPROC;
alias GLboolean function(GLuint sampler) PFNGLISSAMPLERPROC;
alias void function(GLuint unit, GLuint sampler) PFNGLBINDSAMPLERPROC;
alias void function(GLuint sampler, GLenum pname, GLint param) PFNGLSAMPLERPARAMETERIPROC;
alias void function(GLuint sampler, GLenum pname, const(GLint)* param) PFNGLSAMPLERPARAMETERIVPROC;
alias void function(GLuint sampler, GLenum pname, GLfloat param) PFNGLSAMPLERPARAMETERFPROC;
alias void function(GLuint sampler, GLenum pname, const(GLfloat)* param) PFNGLSAMPLERPARAMETERFVPROC;
alias void function(GLuint sampler, GLenum pname, const(GLint)* param) PFNGLSAMPLERPARAMETERIIVPROC;
alias void function(GLuint sampler, GLenum pname, const(GLuint)* param) PFNGLSAMPLERPARAMETERIUIVPROC;
alias void function(GLuint sampler, GLenum pname, GLint* params) PFNGLGETSAMPLERPARAMETERIVPROC;
alias void function(GLuint sampler, GLenum pname, GLint* params) PFNGLGETSAMPLERPARAMETERIIVPROC;
alias void function(GLuint sampler, GLenum pname, GLfloat* params) PFNGLGETSAMPLERPARAMETERFVPROC;
alias void function(GLuint sampler, GLenum pname, GLuint* params) PFNGLGETSAMPLERPARAMETERIUIVPROC;
alias void function(GLuint id, GLenum target) PFNGLQUERYCOUNTERPROC;
alias void function(GLuint id, GLenum pname, GLint64* params) PFNGLGETQUERYOBJECTI64VPROC;
alias void function(GLuint id, GLenum pname, GLuint64* params) PFNGLGETQUERYOBJECTUI64VPROC;
alias void function(GLuint index, GLuint divisor) PFNGLVERTEXATTRIBDIVISORPROC;
alias void function(GLuint index, GLenum type, GLboolean normalized, GLuint value) PFNGLVERTEXATTRIBP1UIPROC;
alias void function(GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) PFNGLVERTEXATTRIBP1UIVPROC;
alias void function(GLuint index, GLenum type, GLboolean normalized, GLuint value) PFNGLVERTEXATTRIBP2UIPROC;
alias void function(GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) PFNGLVERTEXATTRIBP2UIVPROC;
alias void function(GLuint index, GLenum type, GLboolean normalized, GLuint value) PFNGLVERTEXATTRIBP3UIPROC;
alias void function(GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) PFNGLVERTEXATTRIBP3UIVPROC;
alias void function(GLuint index, GLenum type, GLboolean normalized, GLuint value) PFNGLVERTEXATTRIBP4UIPROC;
alias void function(GLuint index, GLenum type, GLboolean normalized, const(GLuint)* value) PFNGLVERTEXATTRIBP4UIVPROC;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
PFNGLGENSAMPLERSPROC glGenSamplers;
PFNGLDELETESAMPLERSPROC glDeleteSamplers;
PFNGLISSAMPLERPROC glIsSampler;
PFNGLBINDSAMPLERPROC glBindSampler;
PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
PFNGLQUERYCOUNTERPROC glQueryCounter;
PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
*/
